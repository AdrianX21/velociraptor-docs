<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2019 on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/blog/2019/</link><description>Recent content in 2019 on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Jun 2021 06:54:15 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/blog/2019/index.xml" rel="self" type="application/rss+xml"/><item><title>Digging into the System Resource Usage Monitor (SRUM)</title><link>https://docs.velociraptor.app/blog/2019/2019-12-31_digging-into-the-system-resource-usage-monitor-srum-afbadb1a375/</link><pubDate>Tue, 31 Dec 2019 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-12-31_digging-into-the-system-resource-usage-monitor-srum-afbadb1a375/</guid><description>Uncovering history with Velociraptor By Mike Cohen Commonly in many incident response scenarios we need to gather evidence of program executions. For example, a phishing email delivering malware was sent to a user — did the user click on it? Did the malware run? was the email forwarded to any other users?
One of the most useful sources of evidence of execution on Windows is the System Resource Usage Monitor (SRUM).</description></item><item><title>Velociraptor to Elasticsearch</title><link>https://docs.velociraptor.app/blog/2019/2019-12-08-velociraptor-to-elasticsearch-3a9fc02c6568/</link><pubDate>Sun, 08 Dec 2019 23:50:52 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-12-08-velociraptor-to-elasticsearch-3a9fc02c6568/</guid><description>Taking your data elsewhere… By Justin Welgemoed Since release 0.3.5 Velociraptor includes an Elastic VQL plugin plus two built-in server artifacts that demonstrate how to make use of this plugin.
Set your data free! Velociraptor is great at collecting oceans of information from a vast fleet of client machines but that information is, by default, only stored locally on the Velociraptor server.
In a typical deployment, responders and analysts tend to either…</description></item><item><title>Recovering deleted NTFS Files with Velociraptor</title><link>https://docs.velociraptor.app/blog/2019/2019-11-15_recovering-deleted-ntfs-files-with-velociraptor-1fcf09855311/</link><pubDate>Fri, 15 Nov 2019 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-11-15_recovering-deleted-ntfs-files-with-velociraptor-1fcf09855311/</guid><description>By Mike Cohen On a recent engagement we responded to an intrusion where the attacker has added a new scheduled task to the Windows Task Scheduler directory (%systemroot%\System32\Task) some time ago. This is a common TTP for achieving persistence (See Mitre Att&amp;amp;ck). Unfortunately the actual task file was later removed and event logs were cycled past the time of interest.
In that case we were able to use Velociraptor to employ some deep forensic techniques and with a bit of luck were able to recover the deleted task file.</description></item><item><title>Windows Event Logs</title><link>https://docs.velociraptor.app/blog/2019/2019-11-12_windows-event-logs-d8d8e615c9ca/</link><pubDate>Tue, 12 Nov 2019 10:40:24 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-11-12_windows-event-logs-d8d8e615c9ca/</guid><description>By Mike Cohen One of the most critical sources of data when responding to an incident on windows systems is the event logs. Windows event logs record security significant events.
However, unlike more traditional Unix syslogs, the Windows Event Log system is more complex and there are a number of potential problems that an investigator can run into.
In this post we explore the windows event log system from the point of view of the investigator.</description></item><item><title>Triage with Velociraptor — Pt 3</title><link>https://docs.velociraptor.app/blog/2019/2019-10-08_triage-with-velociraptor-pt-3-d6f63215f579/</link><pubDate>Tue, 08 Oct 2019 09:03:34 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-10-08_triage-with-velociraptor-pt-3-d6f63215f579/</guid><description>By Mike Cohen This is the final part of this three part series of articles describing how to use Velociraptor to collect files from an endpoint. Our first part shows how we can use the Velociraptor agent in a typical client/server setting to collect artifacts from one or many endpoints at the push of a button, within seconds.
Part two examined what to do if Velociraptor is not already installed as an agent (or can not be remotely installed).</description></item><item><title>Triage with Velociraptor — Pt 2</title><link>https://docs.velociraptor.app/blog/2019/2019-10-04_triage-with-velociraptor-pt-2-d0f79066ca0e/</link><pubDate>Fri, 04 Oct 2019 23:50:52 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-10-04_triage-with-velociraptor-pt-2-d0f79066ca0e/</guid><description>By Mike Cohen In the previous part of this series of articles we saw how Velociraptor can be used to automatically collect and preserve files from a remote system. This is great if you have Velociraptor installed as an agent on the endpoint — but what if you (or your customer) does not?
Interactive collection Velociraptor is essentially a query engine. All its operations are controlled by VQL queries normally encapsulated in a YAML files called artifacts.</description></item><item><title>Triage with Velociraptor — Pt 1</title><link>https://docs.velociraptor.app/blog/2019/2019-10-02_triage-with-velociraptor-pt-1-253f57ce96c0/</link><pubDate>Wed, 02 Oct 2019 13:32:39 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-10-02_triage-with-velociraptor-pt-1-253f57ce96c0/</guid><description>By Mike Cohen This is part 1 of the 3 part series focused around triaging and file collection.
Traditionally digital forensic practitioners and incident responders collected disk images to retain evidence in cases of compromise. However in recent times, the size of investigations and the short time frames required, started a trend of more selective evidence collection. Instead of collecting the entire disk, responders now prefer to collect only critical files allowing more rapid triage.</description></item><item><title>Velociraptor’s client side buffer</title><link>https://docs.velociraptor.app/blog/2019/2019-09-11_velociraptor-s-client-side-buffer-3ce03697a4e6/</link><pubDate>Wed, 11 Sep 2019 00:31:39 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2019/2019-09-11_velociraptor-s-client-side-buffer-3ce03697a4e6/</guid><description>By Mike Cohen The recent Velociraptor release (0.3.3) features a client side buffer. What does this do and how does it change Velociraptor’s approach to incident response?
What is a local buffer? The Velociraptor client is really just a (Velociraptor Query Language) VQL execution engine. When collecting an artifact, the client running on the endpoint, simply executes the VQL and streams rows from the query to the server as they occur.</description></item></channel></rss>