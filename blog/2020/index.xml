<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2020 on Velociraptor - Digging deeper!</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/</link><description>Recent content in 2020 on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Jun 2021 07:41:37 +0000</lastBuildDate><atom:link href="https://scudette.github.io/velociraptor-docs/blog/2020/index.xml" rel="self" type="application/rss+xml"/><item><title>Slack and Velociraptor</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/</link><pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/</guid><description>Photo by Joan Gamell on Unsplash
You might have heard of Slack — a chatting app that has grown in popularity over the past few years. Slack allows for API access to the the workspaces, which opens the door to novel applications and automation.
In this blog post I will demonstrate how to connect Slack to Velociraptor, and be notified within a Slack channel of various events that happen on your Velociraptor deployment.</description></item><item><title>Velociraptor and OSQuery</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-12-13-velociraptor-and-osquery-2a4306dd23c/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-12-13-velociraptor-and-osquery-2a4306dd23c/</guid><description>One of our favorite tools for endpoint visibility is OSQuery. OSQuery has really transformed the state of endpoint visibility and DFIR by allowing analysts to flexibly issue queries to introspect endpoint state, just like a database. This flexibility has always been the inspiration for Velociraptor, and the development of the Velociraptor Query Language (VQL) followed the footsteps of OSQuery to provide a powerful and flexible query language.
However, while OSQuery provides a query engine with many plugins exposing machine state, it is not typically enough on its own.</description></item><item><title>The Windows USN Journal</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-11-13-the-windows-usn-journal-f0c55c9010e/</link><pubDate>Thu, 12 Nov 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-11-13-the-windows-usn-journal-f0c55c9010e/</guid><description>Thanks to Matt Green for discussions, ideas and code….
NTFS is the default filesystem on Windows systems, so it is important for DFIR tools to support extracting as much system state information as possible from it. Velociraptor already has a full featured NTFS parser, and in a recent release (0.5.2) also added a parser for the USN Journal (Update Sequence Number Journal), or Change Journal.
What is the USN Journal? By default Windows maintains a journal of filesystem activities is a file called $Extend$UsnJrnl in a special data stream called $J.</description></item><item><title>Velociraptor Communications</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-09-28-velociraptor-network-communications-30568624043a/</link><pubDate>Sun, 27 Sep 2020 01:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-09-28-velociraptor-network-communications-30568624043a/</guid><description>You might have heard that Velociraptor allows you to quickly query endpoint state for rapid response and monitoring of many thousands of devices across the internet. Unlike some other tools, Velociraptor’s communication is scalable, secure and instantaneous.
Many people ask me about the client/server communication protocol. The Velociraptor documentation simply states that communications is encrypted over a TLS connection but there is more to it than that.
In this post I would like to delve into the low level details of how clients securely communicate with the server and cover some common deployment scenarios.</description></item><item><title>Velociraptor SSO Authentication</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-08-17-velociraptor-sso-authentication-6dd68d46dccf/</link><pubDate>Sun, 16 Aug 2020 01:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-08-17-velociraptor-sso-authentication-6dd68d46dccf/</guid><description>The Velociraptor GUI allows administrators and DFIR team members to rapidly respond and hunt across their entire deployment in seconds. This is a powerful capability, and must be adequately protected.
Modes of authentication Velociraptor supports two modes of authentication:
Basic authentication
Single Sign On using third party OAuth2 logon flow.
In the basic authentication mode, GUI users are added by the administrator and given passwords.</description></item><item><title>Profiling the beast</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-08-16-profiling-the-beast-58913437fd16/</link><pubDate>Sun, 16 Aug 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-08-16-profiling-the-beast-58913437fd16/</guid><description>Photo by Daniel Cheung on Unsplash
You might have previously heard about Velociraptor — fast becoming the standard open source agent for endpoint monitoring and collection. Being an open source project provides users with visibility into the inner workings of the tool since anyone can see the source code and even contribute to it!
While I usually write about Velociraptor features that make DFIR work easier and more effective, this time I am actually going to talk about a feature of the Golang programming language itself (which Velociraptor is written in).</description></item><item><title>Triage with Velociraptor — Pt 4</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-07-14-triage-with-velociraptor-pt-4-cf0e60810d1e/</link><pubDate>Tue, 14 Jul 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-07-14-triage-with-velociraptor-pt-4-cf0e60810d1e/</guid><description>Woman vector created by vectorpouch — www.freepik.com
Velociraptor is a great tool for collecting Artifacts such as files and other state information from endpoints. Artifacts are simply VQL queries wrapped inside a YAML file providing the query with sufficient context to operate. Typically the triage phase of the DFIR process involves collecting and preserving evidence as quickly as possible, performing quick analysis in order to identify machines of interest for further analysis.</description></item><item><title>Velociraptor in the tool age</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-07-13-velociraptor-in-the-tool-age-d896dfe71b9/</link><pubDate>Mon, 13 Jul 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-07-13-velociraptor-in-the-tool-age-d896dfe71b9/</guid><description>People vector created by brgfx — www.freepik.com
Velociraptor is a powerful endpoint visibility tool. It has plugins and parsers for many file formats, such as raw NTFS access, raw registry hive, prefetch files etc.
However, as most DFIR professionals know, there are so many tools out there that we would love to use in our IR work. One of the strengths of Velociraptor is its flexibility afforded by the use of theVelociraptor Query Language (VQL).</description></item><item><title>The Velociraptor Query Language Pt 2</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/</link><pubDate>Fri, 19 Jun 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/</guid><description>In our previous article I introduced the basics of the Velociraptor Query Language (VQL). We have learned the basic structure of VQL is similar to the SQL SELECT statement
However, one of the main differences between SQL and VQL is that VQL’s data sources are not simple data tables, but are instead executable code termed “plugins”. VQL plugins are simply generators of rows, and may take a number of named arguments.</description></item><item><title>The Velociraptor Query Language Pt 1</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/</link><pubDate>Sun, 14 Jun 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/</guid><description>Velociraptor’s query language is central to the operation of Velociraptor. We find it being used in querying endpoints, collecting forensic artifacts and endpoint state and even in post processing data on the server.
Velociraptor is ultimately just a VQL query evaluation engine! Why should you know more about VQL? Users do not actually need to know VQL to simply collect DFIR artifacts from endpoints, hunt for malware or remediate an infection.</description></item><item><title>Velociraptor</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-04-16-velociraptor-e48a47e0317d/</link><pubDate>Thu, 16 Apr 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-04-16-velociraptor-e48a47e0317d/</guid><description>This is an introductory article explaining the rationale behind Velociraptor’s design and particularly how Velociraptor evolved with some historical context compared with other DFIR tooling. We took a lot of inspiration and learned many lessons by using other great tools, and Velociraptor is our attempt at pushing the field forward.
Digital forensics is primarily focused on answering questions. Most practitioners limit their cases around high level questions, such as did the user access a particular file?</description></item><item><title>Velociraptor’s ACL model</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-29-velociraptors-acl-model-7f497575daee/</link><pubDate>Sun, 29 Mar 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-29-velociraptors-acl-model-7f497575daee/</guid><description>Photo by Jose Fontano on Unsplash
Velociraptor is a very powerful tool with a great deal of privileged access to many endpoints. Velociraptor clients typically run with System or root level access on endpoints, in order to have low level access to the operating system. It follows that administrators on Velociraptor also have privileged access to the entire domain as well — they are equivalent to domain administrators.
For small trusted teams of investigators this is probably fine, however as Velociraptor is being more widely deployed in enterprise environments it has become clear that we needed a more elaborate role based ACL model.</description></item><item><title>Velociraptor notebooks</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-28-velociraptor-notebooks-d02e0bd11230/</link><pubDate>Sat, 28 Mar 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-28-velociraptor-notebooks-d02e0bd11230/</guid><description>Velociraptor is a great tool for collecting endpoint state easily and efficiently. It is so efficient, that sometimes we end up with a lot of collected data and are left with the task of making sense of the data, and documenting our investigative process.
In a previous article we have seen how post-processing of collected data can be done using Jupyter notebooks. The notebook is a living document, allowing us to run analysis code interspersed among documentation which can be updates in real time, as the analyst post-processes and annotates the data.</description></item><item><title>Extending VQL plugins</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-07-extending-vql-plugins-7fb004cb6ec4/</link><pubDate>Sat, 07 Mar 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-07-extending-vql-plugins-7fb004cb6ec4/</guid><description>Velociraptor is a unique endpoint visibility tool because it provides the ability for users to write custom, tailored queries using the Velociraptor Query Language (VQL). Having a powerful query language right at the endpoint gives our responders unprecedented flexibility, and the ability to leverage the experience of other analysts within the vibrant Velociraptor community.
VQL is a powerful language but was never designed to be a full featured programming language — it is deliberately kept simple and easy to use.</description></item><item><title>Velociraptor Post-processing with Jupyter Notebook and Pandas</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-06-velociraptor-post-processing-with-jupyter-notebook-and-pandas-8a344d05ee8c/</link><pubDate>Fri, 06 Mar 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-03-06-velociraptor-post-processing-with-jupyter-notebook-and-pandas-8a344d05ee8c/</guid><description>Velociraptor is a powerful endpoint visibility tool. The unique strength of the tool is being able to collect endpoint state by using the Velociraptor Query Language (VQL) via custom or curated “Artifacts”. Not only can one collect artifacts from a single host, but one can collect the same artifact from many thousands of hosts within seconds.
Being able to collect a lot of data quickly is awesome, but the flip side is that a lot of data makes it harder to review manually.</description></item><item><title>Hunting Malware using Mutants</title><link>https://scudette.github.io/velociraptor-docs/blog/2020/2020-01-12_hunting-malware-using-mutants-ea08e86dfc19/</link><pubDate>Sun, 12 Jan 2020 00:38:44 +0000</pubDate><guid>https://scudette.github.io/velociraptor-docs/blog/2020/2020-01-12_hunting-malware-using-mutants-ea08e86dfc19/</guid><description>By Mike Cohen Recently Velociraptor has gained some interesting process analysis features. This is the first in a series of short articles discussing how you can use these new features to inspect suspicious processes on your endpoint and hopefully catch malware before it can gain a long term foothold.
This article will focus on windows Named Mutex Objects (On windows these are called Mutant Objects for some reason).
Mutants and Malware What is a Mutant?</description></item></channel></rss>