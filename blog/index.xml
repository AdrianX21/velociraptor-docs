<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Velociraptor Blog on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/blog/</link><description>Recent content in Velociraptor Blog on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>The Velociraptor API and FUSE</title><link>https://docs.velociraptor.app/blog/html/2019/08/28/the_velociraptor_api/</link><pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2019/08/28/the_velociraptor_api/</guid><description>This page is written about a very old version of Velociraptor and is retained for historical purposes. Currently the fuse feature was removed.
The Velociraptor GUI is very useful, but for the power user, the Velociraptor API provides a powerful mechanism to integrate and automate. We previously discussed how the Velociraptor API can be used by external programs. This post explore a sample program that uses the API and presents a client&amp;rsquo;s VFS as a FUSE directory.</description></item><item><title>Velociraptor Interactive Shell</title><link>https://docs.velociraptor.app/blog/html/2018/12/11/velociraptor_interactive_shell/</link><pubDate>Tue, 11 Dec 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/12/11/velociraptor_interactive_shell/</guid><description>One of the interesting new features in the latest release of Velociraptor is an interactive shell. One can interact with the end point over the standard Velociraptor communication mechanism - an encrypted and authenticated channel.
This feature is implemented by utilizing the Velociraptor event monitoring, server side VQL queries. This post explores how these components come together to deliver a responsive, interactive workflow.
Endpoint shell access Although we generally try to avoid it, sometimes the easiest way to extract certain information is to run a command and parse its output.</description></item><item><title>More on client event collection</title><link>https://docs.velociraptor.app/blog/html/2018/12/09/more_on_client_event_collection/</link><pubDate>Sun, 09 Dec 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/12/09/more_on_client_event_collection/</guid><description>Periodic Event queries The simplest kind of events are periodically generated events. These are created using the clock() VQL plugin. This is a simple event plugin which just emits a new row periodically.
$ velociraptor query &amp;quot;select Unix from clock(period=5)&amp;quot; --max_wait 1 [ { &amp;quot;Unix&amp;quot;: 1544339715 } ][ { &amp;quot;Unix&amp;quot;: 1544339720 } ]^C The query will never terminate, instead the clock() plugin will emit a new timestamp every 5 seconds.</description></item><item><title>Velociraptor training at NZITF</title><link>https://docs.velociraptor.app/blog/html/2018/11/13/velociraptor_training_at_nzitf/</link><pubDate>Tue, 13 Nov 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/11/13/velociraptor_training_at_nzitf/</guid><description>Velociraptor training at NZITF We are very excited to run this full day training workshop at the New Zealand Internet Engineering Task Force (NZITF) conference.
The training material can be downloaded here &amp;quot;Velociraptor NZITF training&amp;quot;.</description></item><item><title>Velociraptor walk through and demo</title><link>https://docs.velociraptor.app/blog/html/2018/09/03/velociraptor_walk_through_and_demo/</link><pubDate>Mon, 03 Sep 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/09/03/velociraptor_walk_through_and_demo/</guid><description>I just uploaded a screencast of the latest Velociraptor - check it out and play with it, and please provide feedback at velociraptor-discuss@googlegroups.com</description></item><item><title>Files, files everything is just a file!</title><link>https://docs.velociraptor.app/blog/html/2018/08/10/files_files_everything_is_just_a_file/</link><pubDate>Fri, 10 Aug 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/08/10/files_files_everything_is_just_a_file/</guid><description>GRR's original design abstracted the data storage to a simple key/value store originally based around Bigtable. For open source deployments various key value stores were used starting from MongoDB, to SQLite and finally MySQL. Although the original idea was to use a simple key/value implementation, due to locking requirements the data store implementation became very complex.
As Velociraptor introduced a major redesign of the underlying data store architecture, we are now able to relax our demands of the datastore and use a true key/value model (since we have no requirements for locking and synchronization).</description></item><item><title>Velocidex Query Language (VQL)</title><link>https://docs.velociraptor.app/blog/html/2018/08/10/the_velocidex_query_language/</link><pubDate>Fri, 10 Aug 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/08/10/the_velocidex_query_language/</guid><description>This page is written about a very old version of VQL and is retained for historical purposes. Current VQL works differently - consult the current documentation.
VQL Overview VQL is only loosely based around SQL in the sense that the general statement structure is similar. However, VQL is a very simple dialect. Like SQL, a VQL query produces a table of results with specific columns and multiple rows.</description></item></channel></rss>