<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Artifact Exchange on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/exchange/</link><description>Recent content in Artifact Exchange on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Jun 2021 14:03:59 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/exchange/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom.Label.User</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/custom.label.user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/custom.label.user/</guid><description>This artifact watches for new client enrolments and automatically label the client with the required label if the user exists.
This artifact can be the starting point for automatically labeling a machine based on any other property - just change the artifact to watch and the result filter.
#server #event #labels
name:Custom.Label.Userdescription:|This artifact watches for new client enrolments and automatically label the client with the required label if the user exists.</description></item><item><title>Custom.Server.Slack.Clients.Enrolled</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/custom.server.slack.clients.enrolled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/custom.server.slack.clients.enrolled/</guid><description>Send a message to slack when clients become enrolled.
This artifact triggers when a client is interrogated within 60 seconds of it being seen for the first time.
name:Custom.Server.Slack.Clients.Enrolleddescription:|Send a message to slack when clients become enrolled. This artifact triggers when a client is interrogated within 60 seconds of it being seen for the first time.type:SERVER_EVENTparameters:- name:FirstSeenDelaydefault:&amp;#34;60&amp;#34;type:intdescription:|The time between first_seen_time and Generic.Client.Info collection.- name:SlackTokendescription:|The token URL obtained from Slack. Leave blank to use server metadata.</description></item><item><title>Custom.Windows.Memory.HollowsHunter</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/hollowshunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/hollowshunter/</guid><description>Use hollows_hunter to detect suspicious process injections.
Upload any findings to the server, including process dumps.
name:Custom.Windows.Memory.HollowsHunterdescription:|Use hollows_hunter to detect suspicious process injections. Upload any findings to the server, including process dumps.tools:- name:hollows_huntergithub_project:hasherezade/hollows_huntergithub_asset_regex:hollows_hunter64.exeserve_locally:truesources:- precondition:SELECT OS From info() where OS = &amp;#39;windows&amp;#39;query:|-- Get the path to the hollows_hunter tool and a fresh temp directory. LET binaries &amp;lt;= SELECT FullPath, tempdir() AS TempDir FROM Artifact.Generic.Utils.FetchBinary( ToolName=&amp;#34;hollows_hunter&amp;#34;) -- Run the tool and relay back the output, as well as upload all the files from the tempdir.</description></item><item><title>Custom.Windows.Memory.InjectedThread</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/get-injectedthread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/get-injectedthread/</guid><description>Use Get-InjetedThreads to detect process injections. Note: this query is complex powershell. Run it after a scriptblock hunt.
https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2 https://gist.github.com/mgreen27/1982aaae37a7afdd047db619bf17c8a1
name:Custom.Windows.Memory.InjectedThreadauthor:&amp;#34;Matt Green - @mgreen27&amp;#34;description:|Use Get-InjetedThreads to detect process injections. Note: this query is complex powershell. Run it after a scriptblock hunt. https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2 https://gist.github.com/mgreen27/1982aaae37a7afdd047db619bf17c8a1tools:- name:Get-InjectedThreadprecondition:SELECT OS From info() where OS = &amp;#39;windows&amp;#39;sources:- query:|-- Get the path to the Get-InjectedThread tool LET script &amp;lt;= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary( ToolName=&amp;#34;Get-InjectedThread&amp;#34;, IsExecutable=&amp;#39;N&amp;#39; ) -- Run the tool and relay back the output LET results &amp;lt;= SELECT parse_string_with_regex( string=Stdout, regex=[ &amp;#34;^\\s+ProcessName\\s+:\\s+(?</description></item><item><title>Custom.Windows.System.AccessControlList</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/custom.windows.system.accesscontrollist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/custom.windows.system.accesscontrollist/</guid><description>This artifact displays the access control lists of files.
Note: This artifact uses Powershell to gather the information.
name:Custom.Windows.System.AccessControlListdescription:|This artifact displays the access control lists of files. Note: This artifact uses Powershell to gather the information.type:CLIENTparameters:- name:Globdescription:A search expression that will be passed to Powershelldefault:C:\Windows\System32\Config\s*- name:ACLFilterdescription:Only show files with ACLs that match this regex.default:BUILTIN\\Users.+Allowsources:- precondition:SELECT OS From info() where OS = &amp;#39;windows&amp;#39; OR OS = &amp;#39;linux&amp;#39; OR OS = &amp;#39;darwin&amp;#39;query:|LET Script &amp;lt;= tempfile(data=&amp;#39;&amp;#39;&amp;#39; $glob = $args[0] Get-Acl $glob | select Path, Owner, Group, AccessToString | convertto-json &amp;#39;&amp;#39;&amp;#39;, extension=&amp;#34;.</description></item><item><title>HashRunKeys</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/hash_run_keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/hash_run_keys/</guid><description>Iterate over all the run keys and locate their binary then hash it.
Tags: #windows #registry #detection
name:HashRunKeysdescription:|Iterate over all the run keys and locate their binary then hash it. Tags: #windows #registry #detectionparameters:- name:runKeysdefault:|HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Run\*- name:pathRegextype:hidden# Pick the first part - either quoted or not.default:&amp;gt;-(^&amp;#34;(?P&amp;lt;quoted_path&amp;gt;[^&amp;#34;]+)&amp;#34;|(?P&amp;lt;unquoted_path&amp;gt;^[^ ]+))sources:- precondition:SELECT OS From info() where OS = &amp;#39;windows&amp;#39;query:|LET paths = SELECT FullPath,Name, Data.value AS Value, parse_string_with_regex(string=Data.value, regex=pathRegex) as regData FROM glob(globs=split(string=runKeys, sep=&amp;#34;[, \\n]+&amp;#34;), accessor=&amp;#34;reg&amp;#34;) WHERE Data.</description></item><item><title>Linux.Memory.Acquisition</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linuxmemoryacquisition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linuxmemoryacquisition/</guid><description>Acquires a full memory image. We download LiME and use it to acquire a full memory image.
NOTE: This artifact usually transfers a lot of data. You should increase the default timeout to allow it to complete. ( Example : 2Gb of memory time takes about 50s )
name:Linux.Memory.Acquisitionauthor:URCA (Corentin Garcia / Emmanuel Mesnard)description:|Acquires a full memory image. We download LiME and use it to acquire a full memory image. NOTE: This artifact usually transfers a lot of data.</description></item><item><title>Linux.Network.Netstat</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.network.netstat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.network.netstat/</guid><description>This artifact will parse /proc and reveal information about current network connections.
name:Linux.Network.Netstatdescription:|This artifact will parse /proc and reveal information about current network connections.type:CLIENTparameters:- name:StateRegexdefault:&amp;#34;Listening|Established&amp;#34;description:Only show these statessources:- precondition:SELECT OS From info() where OS = &amp;#39;linux&amp;#39;query:|-- Break down the address of the form 0100007F:22B9 LET _X(x) = parse_string_with_regex(string=addr, regex=&amp;#34;(..)(..)(..)(..):(....)&amp;#34;) -- Unroll hex encoded IPv4 address into more usual form. LET ParseAddress(addr) = dict( IP=format(format=&amp;#34;%d.%d.%d.%d&amp;#34;, args=[ int(int=&amp;#34;0x&amp;#34; + _X(x=addr).g4), int(int=&amp;#34;0x&amp;#34; + _X(x=addr).</description></item><item><title>Linux.Volatility.Create.Profile</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/volatility_profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/volatility_profile/</guid><description>This artifact is used to create the profile to the environnements Debian / Ubuntu.
name:Linux.Volatility.Create.Profileauthor:URCA (Corentin Garcia / Emmanuel Mesnard)description:|This artifact is used to create the profile to the environnements Debian / Ubuntu.required_permissions:- EXECVEtools:- name:Volatilityurl:https://github.com/volatilityfoundation/volatility/archive/master.zipparameters:- name:Zipnametype:stringdefault:Ubuntuprecondition:SELECT OS From info() where OS = &amp;#39;linux&amp;#39;sources:- queries:- LET dirtmp = tempdir(remove_last=true)LET vola = SELECT * FROM execve(argv=[&amp;#39;bash&amp;#39;, &amp;#39;-c&amp;#39;, &amp;#39;mv /tmp/master.zip /tmp/volatility-master.zip ; cd /tmp/ ; apt install -y dwarfdump zip unzip ; unzip -o /tmp/volatility-master.</description></item><item><title>Server.Import.ArtifactExchange</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/server.import.artifactexchange/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/server.import.artifactexchange/</guid><description>This artifact will automatically import the latest artifact exchange bundle into the current server.
name:Server.Import.ArtifactExchangedescription:|This artifact will automatically import the latest artifact exchange bundle into the current server.type:SERVERrequired_permissions:- SERVER_ADMINparameters:- name:ExchangeURLdefault:https://github.com/Velocidex/velociraptor-docs/raw/gh-pages/exchange/artifact_exchange.zip- name:Prefixdescription:Add artifacts with this prefixdefault:Exchangesources:- query:|LET X = SELECT artifact_set(prefix=Prefix, definition=Definition) AS Definition FROM foreach(row={ SELECT Content FROM http_client( remove_last=TRUE, tempfile_extension=&amp;#34;.zip&amp;#34;, url=ExchangeURL) }, query={ SELECT FullPath, regex_replace(re=&amp;#39;&amp;#39;&amp;#39;(?sm)^name: +([^\n]+)&amp;#39;&amp;#39;&amp;#39;, replace=&amp;#34;name: &amp;#34; + Prefix + &amp;#34;.$1&amp;#34;, source=read_file(accessor=&amp;#34;zip&amp;#34;, filename=FullPath)) AS Definition FROM glob(globs=url(path=Content, fragment=&amp;#39;/**/*.</description></item><item><title>Windows.ActiveDirectory.PrivilegedUsers</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/activedirectoryprivilegedusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/activedirectoryprivilegedusers/</guid><description>If on a Domain Controller (ProductType = 2), recursively enumerate membership of privileged groups, then for each user, collect details relevant to an investigation: Create Date, Last Logon, Group Membership, SID
If not on a Domain Controller, return nothing
name:Windows.ActiveDirectory.PrivilegedUsersauthor:liteman @kevinfosecdescription:|If on a Domain Controller (ProductType = 2), recursively enumerate membership of privileged groups, then for each user, collect details relevant to an investigation: Create Date, Last Logon, Group Membership, SID If not on a Domain Controller, return nothingtype:CLIENTsources:- precondition:SELECT OS From info() where OS = &amp;#39;windows&amp;#39;query:|LET info &amp;lt;= SELECT * from info() LET script &amp;lt;= &amp;#39; $prodtype = Get-WmiObject -Class Win32_OperatingSystem | Select -ExpandProperty ProductType if ($prodType -eq 2) { import-module activedirectory $users = @() $groups = @(&amp;#34;Domain Admins&amp;#34;, &amp;#34;Enterprise Admins&amp;#34;, &amp;#34;Administrators&amp;#34;, &amp;#34;Schema Admins&amp;#34;, &amp;#34;Account Operators&amp;#34;, &amp;#34;Backup Operators&amp;#34;, &amp;#34;Print Operators&amp;#34;, &amp;#34;Server Operators&amp;#34;, &amp;#34;Cert Publishers&amp;#34;) foreach ($group in $groups) { foreach ($user in @(Get-AdGroupMember -Identity $group -Recursive)) { if (-Not $users.</description></item><item><title>Windows.Applications.FTKImager</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/ftkimager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/ftkimager/</guid><description>Create an E01 Image of the C drive using FTK Imager (Command Line Version)
SourceDriveToImage usually will be 0 (as in \.\PHYSICALDRIVE0) for the C: drive, on a Windows system.
If you intend to image the secondary drive, use, for example, SourceDriveToImage = 1, for \.\PHYSICALDRIVE1
name:Windows.Applications.FTKImagerdescription:|Create an E01 Image of the C drive using FTK Imager (Command Line Version) SourceDriveToImage usually will be 0 (as in \\.\PHYSICALDRIVE0) for the C: drive, on a Windows system.</description></item><item><title>Windows.Detection.PrintNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmare/</guid><description>This artifact returns any binaries in the Windows/spool/drivers/** folders with an untrusted Authenticode entry.
It can be used to hunt for dll files droped during exploitation of CVE-2021-1675 - PrintNightmare.
To query all attached ntfs drives: check the AllDrives switch.
I have added several filters to uplift search capabilities from the original MFT artifact. Due to the multi-drive features, the MFTPath will output the MFT path of the entry.
Available filters include:</description></item><item><title>Windows.ETW.AMSI</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/amsi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/amsi/</guid><description>This artifact uses the ETW provider: (Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67}
name:Windows.ETW.AMSIdescription:|This artifact uses the ETW provider: (Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67}type:CLIENT_EVENTparameters:- name:IocRegexdescription:&amp;#34;Regex of strings to filter for&amp;#34;default:.- name:WhitelistRegexdescription:&amp;#34;Regex of strings to witelist&amp;#34;- name:AppNameRegexdescription:&amp;#34;Application name Regex to enable filtering on source.&amp;#34;default:.sources:- query:|-- collect a small cache of process information for enrichment LET proc = cache(key=&amp;#39;Pid&amp;#39;, period=600, query={ SELECT Pid, Name, Exe,CommandLine, Username,TokenIsElevated FROM pslist() })-- watch ETW provider and first round data manipulationLET hits = SELECT *,timestamp(epoch=timestamp(string=System.</description></item><item><title>Windows.ETW.DetectProcessSpoofing</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.etw.detectprocessspoofing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.etw.detectprocessspoofing/</guid><description>Detects Process parent spoofing such as SelectMyParent.exe, Cobalt Strike PPID spoofing etc.
name:Windows.ETW.DetectProcessSpoofingdescription:|Detects Process parent spoofing such as SelectMyParent.exe, Cobalt Strike PPID spoofing etc.reference:- https://blog.f-secure.com/detecting-parent-pid-spoofing/- https://www.youtube.com/watch?v=DOe7WTuJ1Actype:CLIENT_EVENTsources:- precondition:SELECT OS From info() where OS = &amp;#39;windows&amp;#39;query:|-- Create a FIFO for short lived processes -- hold process logs in memory for 60 seconds. LET RecentProcesses = SELECT * FROM fifo(query={ SELECT System.TimeStamp AS CreateTime, EventData.ImageName AS Name, int(int=EventData.ProcessID) AS Pid FROM watch_etw(guid=&amp;#34;{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}&amp;#34;, any=0x10) WHERE System.</description></item><item><title>Windows.EventLogs.Chainsaw</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.chainsaw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.chainsaw/</guid><description>This artifact leverages Chainsaw to enable usage of Sigma rules (in addition to built-in logic) to faciliate detection within Windows Event Logs.
From the project&amp;rsquo;s description:
&amp;ldquo;Chainsaw provides a powerful ‘first-response’ capability to quickly identify threats within Windows event logs. It offers a generic and fast method of searching through event logs for keywords, and by identifying threats using built-in detection logic and via support for Sigma detection rules.&amp;rdquo;
https://github.com/countercept/chainsaw</description></item><item><title>Windows.Monitoring.PrintNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmaremonitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmaremonitor/</guid><description>This artifact returns ETW PrintService events for potential PrintNightmare activity.
CVE-2021-1675 and CVE-2021-34527
It monitors for DRIVER_ADDED events and enriches with binary information for payload DataFile. Hunt for unexpected drivers with malicious DataFiles.
name:Windows.Monitoring.PrintNightmareauthor:Matt Green - @mgreen27description:|This artifact returns ETW PrintService events for potential PrintNightmare activity. CVE-2021-1675 and CVE-2021-34527 It monitors for DRIVER_ADDED events and enriches with binary information for payload DataFile. Hunt for unexpected drivers with malicious DataFiles. type:CLIENT_EVENTsources:- query:|-- Monitor ETW provider and extract enriched target events LET hits = SELECT System.</description></item><item><title>Windows.NTFS.MFT.HiveNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.ntfs.mft.hivenightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.ntfs.mft.hivenightmare/</guid><description>This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to find several files created as part of the POC tooling for HiveNightmare (CVE-2021-36934):
\hive_sam_ - https://github.com/FireFart/hivenightmare \SAM-20 - https://github.com/GossiTheDog/HiveNightmare \SAM-haxx - https://github.com/GossiTheDog/HiveNightmare \Sam.save - PowerShell version \Sam.hive - https://github.com/WiredPulse/Invoke-HiveNightmare C:\windows\temp\sam - https://github.com/cube0x0/CVE-2021-36934 See Florian Roth&amp;rsquo;s rule here: https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/win_hivenightmare_file_exports.yml name:Windows.NTFS.MFT.HiveNightmaredescription:|This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to find several files created as part of the POC tooling for HiveNightmare (CVE-2021-36934): - \hive_sam_ - https://github.</description></item><item><title>Windows.Remediation.PrintSpooler</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printspoolerremediation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printspoolerremediation/</guid><description>This artifact will enable mitigation of PrintSpooler exploitation used by PrintNightmare - CVE-2021-34527 and CVE-2021-1675.
There are two selectable mitigations:
disabling the print spooler service.
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Spooler\Start = 4 (service disabled).
disable remote registration of the spool service. HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Printers\RegisterSpoolerRemoteRpcEndPoint = 2 (RegisterSpoolerRemoteRpcEndPoint disables).
NOTE: ChangeServiceStartup will set to disable, not stop the printspool service. Its always reccomended to use group policy to deploy these settings.</description></item><item><title>Windows.System.PrinterDriver</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printerdriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printerdriver/</guid><description>This artifact will enumerate installed PrintDrivers using the Win32_PrinterDriver wmi class and parse each DriverPath, ConfigFile and DataFile.
Hunt by searching for untrusted binaries or suspicious removed binararies for evidence of previous exploitation.
name:Windows.System.PrinterDriverauthor:Matt Green - @mgreen27description:|This artifact will enumerate installed PrintDrivers using the Win32_PrinterDriver wmi class and parse each DriverPath, ConfigFile and DataFile. Hunt by searching for untrusted binaries or suspicious removed binararies for evidence of previous exploitation. type:CLIENTsources:- query:|LET Win32_PrinterDrivers = SELECT split(string=Name, sep=&amp;#39;,&amp;#39;)[0] as Name, SupportedPlatform, Version, DriverPath, ConfigFile, DataFile FROM wmi(query=&amp;#39;SELECT * FROM Win32_PrinterDriver&amp;#39;,namespace=&amp;#39;root/CIMV2&amp;#39;)SELECT * FROM Win32_PrinterDrivers- name:BinaryCheckquery:|SELECT lowcase(string=Binary) as Binary, array(a1={ SELECT Name FROM Win32_PrinterDrivers WHERE ( DriverPath = Binary OR ConfigFile = Binary OR DataFile = Binary ) }) as DriverNames, hash(path=Binary) as Hash, parse_pe(file=Binary) as PE, authenticode(filename=Binary) as Authenticode FROM chain( a={ SELECT Name, DriverPath as Binary, &amp;#39;DriverPath&amp;#39; as Type FROM Win32_PrinterDrivers }, b={ SELECT Name as DriverName, ConfigFile as Binary, &amp;#39;ConfigFile&amp;#39; as Type FROM Win32_PrinterDrivers }, c={ SELECT Name as DriverName, DataFile as Binary, &amp;#39;DataFile&amp;#39; as Type FROM Win32_PrinterDrivers }) GROUP BY lowcase(string=Binary)</description></item></channel></rss>