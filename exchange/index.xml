<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Artifact Exchange on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/exchange/</link><description>Recent content in Artifact Exchange on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Jun 2021 14:03:59 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/exchange/index.xml" rel="self" type="application/rss+xml"/><item><title>Exchange.Label.User</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/exchange.label.user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/exchange.label.user/</guid><description>This artifact watches for new client enrolments and automatically label the client with the required label if the user exists.
This artifact can be the starting point for automatically labeling a machine based on any other property - just change the artifact to watch and the result filter.
#server #event #labels
name: Exchange.Label.User description: | This artifact watches for new client enrolments and automatically label the client with the required label if the user exists.</description></item><item><title>Generic.Detection.log4jRCE</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/log4jrce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/log4jrce/</guid><description>Detection for exploitation attempts against log4j RCE vulnerability CVE-2021-44228.
By default this artifact will search for linux path glob: /var/logs/**
For Windows hosts please change the target path. Some examples of path glob may include:
Specific binary: /var/logs/log.gz Wildcards: /var/log/*.gz More wildcards: /var/www/**/*.log Multiple extentions: /var/log/**/*\.{log,gz} Windows: C:/Logs/**/*.{gz,log} or **/*.{gz,log} NOTE: this artifact runs the glob plugin with the nosymlink switch turned on. This will NOT follow any symlinks and may cause unexpected results if unknowingly targeting a folder with symlinks.</description></item><item><title>Generic.Detection.Log4jVulnHunter</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/log4jvulnhunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/log4jvulnhunter/</guid><description>This artifact searches for Vulnerable log4j libraries.
The artifact:
firstly searches for jar, war and ear files then recursively checks content by name then hash for vulnerable versions. reports hit details. The artifact is optimised to recursively search through embedded jar,war and ear files by extracting any discovered jar containers to a tempfile on disk. Select UploadHits to upload Discovered file for further analysis. It is recommended to increase default artifact timeout for large servers or target glob.</description></item><item><title>Generic.Detection.LunasecLog4shell</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/generic.detection.lunaseclog4shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/generic.detection.lunaseclog4shell/</guid><description>Uses the Log4Shell scanner of Lunasec to scan the file systems of all drives of the host for any sign of vulnerabilities related to Log4shell
name: Generic.Detection.LunasecLog4shell author: &amp;quot;Marinus Boekelo &amp;amp; NoÃ«l Keijzer - Northwave CERT&amp;quot; description: | Uses the Log4Shell scanner of Lunasec to scan the file systems of all drives of the host for any sign of vulnerabilities related to Log4shell tools: - name: log4shell_linux_amd64 github_project: lunasec-io/lunasec github_asset_regex: Linux_x86_64 serve_locally: true - name: log4shell_linux_x86 github_project: lunasec-io/lunasec github_asset_regex: Linux_i386 serve_locally: true - name: log4shell_windows_amd64 github_project: lunasec-io/lunasec github_asset_regex: Windows_x86_64 serve_locally: true - name: log4shell_windows_x86 github_project: lunasec-io/lunasec github_asset_regex: Windows_i386 serve_locally: true reference: - https://github.</description></item><item><title>HashRunKeys</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/hash_run_keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/hash_run_keys/</guid><description>Iterate over all the run keys and locate their binary then hash it.
Tags: #windows #registry #detection
name: HashRunKeys description: | Iterate over all the run keys and locate their binary then hash it. Tags: #windows #registry #detection parameters: - name: runKeys default: | HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Run\* - name: pathRegex type: hidden # Pick the first part - either quoted or not. default: &amp;gt;- (^&amp;quot;(?P&amp;lt;quoted_path&amp;gt;[^&amp;quot;]+)&amp;quot;|(?P&amp;lt;unquoted_path&amp;gt;^[^ ]+)) sources: - precondition: SELECT OS From info() where OS = 'windows' query: | LET paths = SELECT FullPath,Name, Data.</description></item><item><title>Linux.Applications.WgetHSTS</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.applications.wgethsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.applications.wgethsts/</guid><description>Wget creates a HSTS log file in a user&amp;rsquo;s home directory. This can contain forensically relevant informtion.
name: Linux.Applications.WgetHSTS description: | Wget creates a HSTS log file in a user's home directory. This can contain forensically relevant informtion. reference: - https://firexfly.com/wget-hsts/ parameters: - name: HSTSGlob default: &amp;quot;/home/*/.wget-hsts&amp;quot; sources: - query: | SELECT Parsed.g1 AS Domain , int(int=Parsed.g2) || 443 AS Port, Parsed.g3 AS IncSubdomains, timestamp(epoch=Parsed.g4) AS Created, int(int=Parsed.g5) AS MaxAge FROM foreach(row={ SELECT FullPath FROM glob(globs=&amp;quot;/home/*/.</description></item><item><title>Linux.Carving.SSHLogs</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.carving.sshlogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.carving.sshlogs/</guid><description>Linux systems typically store audit events in syslog. In particular successful ssh logins are especially important for some investigations.
Unfortunately they are sometimes deleted by attackers or rotated out. If you are desperate it might be worth trying to carve for ssh login events.
NOTES Syslog does not typically store the year in the date - since carving can recover very old records it might be difficult to pinpoint the time.</description></item><item><title>Linux.Collection.CatScale</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.collection.catscale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.collection.catscale/</guid><description>This is a simple artifact that leverages Cat-Scale to collect many different artifacts from a Linux host, then uploads the results to the Velociraptor server.
From the project&amp;rsquo;s description:
&amp;ldquo;Linux CatScale is a bash script that uses live of the land tools to collect extensive data from Linux based hosts. The data aims to help DFIR professionals triage and scope incidents. An Elk Stack instance also is configured to consume the output and assist the analysis process.</description></item><item><title>Linux.Detection.CVE20214034</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.detection.cve20214034/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.detection.cve20214034/</guid><description>This artifact lists processes running as root that were spawns by processes that are not running as root. This kind of behavior is normal for things like sudo or su but for other processes (especially /bin/bash) it could represent a process launched via CVE-2021-4034.
The artifact looks for running processes with this property as well as search the auth log files for evidence of past execution of this exploit.
name: Linux.</description></item><item><title>Linux.Memory.Acquisition</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linuxmemoryacquisition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linuxmemoryacquisition/</guid><description>Acquires a full memory image. We download LiME and use it to acquire a full memory image.
NOTE: This artifact usually transfers a lot of data. You should increase the default timeout to allow it to complete. ( Example : 2Gb of memory time takes about 50s )
name: Linux.Memory.Acquisition author: URCA (Corentin Garcia / Emmanuel Mesnard) description: | Acquires a full memory image. We download LiME and use it to acquire a full memory image.</description></item><item><title>Linux.Network.Netstat</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.network.netstat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.network.netstat/</guid><description>This artifact will parse /proc and reveal information about current network connections.
name: Linux.Network.Netstat description: | This artifact will parse /proc and reveal information about current network connections. type: CLIENT parameters: - name: StateRegex default: &amp;quot;Listening|Established&amp;quot; description: Only show these states sources: - precondition: SELECT OS From info() where OS = 'linux' query: | -- Break down the address of the form 0100007F:22B9 LET _X(x) = parse_string_with_regex(string=addr, regex=&amp;quot;(..)(..)(..)(..):(....)&amp;quot;) -- Unroll hex encoded IPv4 address into more usual form.</description></item><item><title>Linux.Sysinternals.Sysmon</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.sysinternals.sysmon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.sysinternals.sysmon/</guid><description>Parses syslog for Sysmon events on Linux
Reference: https://github.com/Sysinternals/SysmonForLinux
This artifact can also be modified to forward events (as a client event artifact), similar to Windows.Sysinternals.SysmonLogForward.
name: Linux.Sysinternals.Sysmon author: Wes Lambert -- @therealwlambert description: | Parses syslog for Sysmon events on Linux **Reference**: https://github.com/Sysinternals/SysmonForLinux This artifact can also be modified to forward events (as a client event artifact), similar to Windows.Sysinternals.SysmonLogForward. type: CLIENT precondition: SELECT OS From info() where OS = 'linux' parameters: - name: syslogPath default: /var/log/syslog - name: sysmonGrok description: A Grok expression for parsing Sysmon events from syslog on Linux machines default: &amp;gt;- %{SYSLOGTIMESTAMP:Timestamp} (?</description></item><item><title>Linux.Sysinternals.SysmonEvent</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.sysinternals.sysmonevent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.sysinternals.sysmonevent/</guid><description>Parses syslog for Sysmon events on Linux using a unix domain socket.
NOTE: This is an experimental patch for sysmon that gets it to write events to a unix domain socket.
Until it merges upstream you can get it from here:
Reference: https://github.com/Velocidex/SysmonForLinux
name: Linux.Sysinternals.SysmonEvent description: | Parses syslog for Sysmon events on Linux using a unix domain socket. NOTE: This is an experimental patch for sysmon that gets it to write events to a unix domain socket.</description></item><item><title>Linux.Volatility.Create.Profile</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/volatility_profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/volatility_profile/</guid><description>This artifact is used to create the profile to the environnements Debian / Ubuntu.
name: Linux.Volatility.Create.Profile author: URCA (Corentin Garcia / Emmanuel Mesnard) description: | This artifact is used to create the profile to the environnements Debian / Ubuntu. required_permissions: - EXECVE tools: - name: Volatility url: https://github.com/volatilityfoundation/volatility/archive/master.zip parameters: - name: Zipname type: string default: Ubuntu precondition: SELECT OS From info() where OS = 'linux' sources: - queries: - LET dirtmp = tempdir(remove_last=true) LET vola = SELECT * FROM execve(argv=['bash', '-c', 'mv /tmp/master.</description></item><item><title>MacOS.Applications.Safari.History</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/macos.applications.safari.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/macos.applications.safari.history/</guid><description>Parses Safari history database
name: MacOS.Applications.Safari.History description: | Parses Safari history database author: Deepak Sharma - @rxurien type: CLIENT precondition: SELECT OS From info() where OS = 'darwin' parameters: - name: HistoryPath default: /Users/*/Library/Safari/History.db - name: SQLQuery default: | SELECT * FROM history_visits INNER JOIN history_items ON history_items.id = history_visits.history_item; - name: UserRegex default: . - name: UploadFile description: Upload History.db File type: bool sources: - name: History query: | LET history_db = SELECT parse_string_with_regex(regex=&amp;quot;/Users/(?</description></item><item><title>MacOS.System.LocationServices</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/macos.system.locationservices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/macos.system.locationservices/</guid><description>This artifact looks for applications that are registered and allowed for use of location services by checking the plist file in /var/db/locationd/clients.plist.
This can be useful to help determine if these settings have been modified by an attacker to perform location tracking.
For more information about how location services could be abused, see the following:
https://medium.com/@slyd0g/where-in-the-world-is-carmen-sandiego-abusing-location-services-on-macos-10e9f4eefb71
name: MacOS.System.LocationServices description: | This artifact looks for applications that are registered and allowed for use of location services by checking the plist file in `/var/db/locationd/clients.</description></item><item><title>Server.Analysis.CyberChefServer</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/cyberchefserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/cyberchefserver/</guid><description>Analyze/transform data with CyberChef-server.
Note that this requires an accessible Cyberchef-server instance to work.
If you prefer not to run a local instance, you might consider altering the artifact to leverage something like https://prod.apifor.io.
Reference: https://github.com/gchq/CyberChef-server
Examples:
This artifact can be called from within another artifact to analyze/transform the data made available by that artifact.
SELECT * from Artifact.Exchange.Analysis.CyberchefServer(Input=$YOURDATA,Recipe=$YOURRECIPE)
If a default recipe is used, only the input will need to be passed, like so:</description></item><item><title>Server.Findflows</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/findflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/findflows/</guid><description>This artifact enables searching over client flow results with regex and returns a link to the Flow for followup.
name: Server.Findflows author: Matt Green - @mgreen27 description: | This artifact enables searching over client flow results with regex and returns a link to the Flow for followup. type: SERVER parameters: - name: ClientData description: Glob for client data - may need to modify for non default installation default: /opt/velociraptor/clients/** - name: DateAfter type: timestamp description: &amp;quot;search for flow data after this date.</description></item><item><title>Server.Import.ArtifactExchange</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/server.import.artifactexchange/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/server.import.artifactexchange/</guid><description>This artifact will automatically import the latest artifact exchange bundle into the current server.
We can filter on ArtifactNameRegex or add a list of Artifacts (list takes preference). Select DoIt to import content.
name: Server.Import.ArtifactExchange author: Matt Green - @mgreen27 description: | This artifact will automatically import the latest artifact exchange bundle into the current server. We can filter on ArtifactNameRegex or add a list of Artifacts (list takes preference). Select DoIt to import content.</description></item><item><title>Server.Slack.Clients.Enrolled</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/server.slack.clients.enrolled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/server.slack.clients.enrolled/</guid><description>Send a message to slack when clients become enrolled.
This artifact triggers when a client is interrogated within 60 seconds of it being seen for the first time.
name: Server.Slack.Clients.Enrolled description: | Send a message to slack when clients become enrolled. This artifact triggers when a client is interrogated within 60 seconds of it being seen for the first time. type: SERVER_EVENT parameters: - name: FirstSeenDelay default: &amp;quot;60&amp;quot; type: int description: | The time between first_seen_time and Generic.</description></item><item><title>Splunk.Events.Clients</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/splunk.events.clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/splunk.events.clients/</guid><description>This server monitoring artifact will watch a selection of client monitoring artifacts for new events and push those to a splunk index.
NOTE: You must ensure you are collecting these artifacts from the clients by adding them to the &amp;ldquo;Client Events&amp;rdquo; GUI.
name: Splunk.Events.Clients author: &amp;quot;@jurelou&amp;quot; description: | This server monitoring artifact will watch a selection of client monitoring artifacts for new events and push those to a splunk index. NOTE: You must ensure you are collecting these artifacts from the clients by adding them to the &amp;quot;Client Events&amp;quot; GUI.</description></item><item><title>Windows.ActiveDirectory.PrivilegedUsers</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/activedirectoryprivilegedusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/activedirectoryprivilegedusers/</guid><description>If on a Domain Controller (ProductType = 2), recursively enumerate membership of privileged groups, then for each user, collect details relevant to an investigation: Create Date, Last Logon, Group Membership, SID
If not on a Domain Controller, return nothing
name: Windows.ActiveDirectory.PrivilegedUsers author: liteman @kevinfosec description: | If on a Domain Controller (ProductType = 2), recursively enumerate membership of privileged groups, then for each user, collect details relevant to an investigation: Create Date, Last Logon, Group Membership, SID If not on a Domain Controller, return nothing type: CLIENT sources: - precondition: SELECT OS From info() where OS = 'windows' query: | LET info &amp;lt;= SELECT * from info() LET script &amp;lt;= ' $prodtype = Get-WmiObject -Class Win32_OperatingSystem | Select -ExpandProperty ProductType if ($prodType -eq 2) { import-module activedirectory $users = @() $groups = @(&amp;quot;Domain Admins&amp;quot;, &amp;quot;Enterprise Admins&amp;quot;, &amp;quot;Administrators&amp;quot;, &amp;quot;Schema Admins&amp;quot;, &amp;quot;Account Operators&amp;quot;, &amp;quot;Backup Operators&amp;quot;, &amp;quot;Print Operators&amp;quot;, &amp;quot;Server Operators&amp;quot;, &amp;quot;Cert Publishers&amp;quot;) foreach ($group in $groups) { foreach ($user in @(Get-AdGroupMember -Identity $group -Recursive)) { if (-Not $users.</description></item><item><title>Windows.Analysis.Capa</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.analysis.capa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.analysis.capa/</guid><description>Analyze PE, ELF, or shellcode files with capa.
&amp;ldquo;capa detects capabilities in executable files. You run it against a PE, ELF, or shellcode file and it tells you what it thinks the program can do. For example, it might suggest that the file is a backdoor, is capable of installing services, or relies on HTTP to communicate.&amp;rdquo;
https://github.com/fireeye/capa
name: Windows.Analysis.Capa description: | Analyze PE, ELF, or shellcode files with capa. &amp;quot;capa detects capabilities in executable files.</description></item><item><title>Windows.Applications.Cylance</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/cylance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/cylance/</guid><description>Parse Cylance logs.
name: Windows.Applications.Cylance author: &amp;quot;Matt Green - @mgreen27&amp;quot; description: | Parse Cylance logs. parameters: - name: FileGlob default: C:\ProgramData\Cylance\Status\Status.json sources: - query: | LET files = SELECT * FROM glob(globs=FileGlob) LET parse_json_files = SELECT FullPath, parse_json(data=Data) as json FROM read_file(filenames=FullPath) LET results &amp;lt;= SELECT * FROM foreach( row=files, query=parse_json_files ) SELECT FullPath, json.SnapshotTime as SnapshotTime, json.ProductInfo as ProductInfo, json.Policy as Policy, json.ScanState as ScanState FROM results - name: Threats queries: - | SELECT * FROM foreach(row={ SELECT json.</description></item><item><title>Windows.Applications.DefenderDHParser</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/defenderdhparser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/defenderdhparser/</guid><description>This artifact leverages Windows Defender DetectionHistory tool to parse and return the parameters of Windows Defender detections contained in Detection History files.
name: Windows.Applications.DefenderDHParser description: | This artifact leverages Windows Defender DetectionHistory tool to parse and return the parameters of Windows Defender detections contained in Detection History files. author: Eduardo Mattos - @eduardfir reference: - https://github.com/jklepsercyber/defender-detectionhistory-parser - https://www.sans.org/blog/uncovering-windows-defender-real-time-protection-history-with-dhparser/ tools: - name: DHParser url: https://github.com/jklepsercyber/defender-detectionhistory-parser/archive/refs/tags/v1.0.zip parameters: - name: DetectionHistoryPath description: &amp;quot;Path to Defender Detection History Files&amp;quot; default: C:\ProgramData\Microsoft\Windows Defender\Scans\History\Service\ sources: - query: | -- preparation LET Hostname &amp;lt;= SELECT Hostname as Host FROM info() LET Toolzip &amp;lt;= SELECT FullPath FROM Artifact.</description></item><item><title>Windows.Applications.DIEC</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/diec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/diec/</guid><description>Execute DetectItEasy (console version) on specified paths and return rows of results to hunt/filter on binaries based types of files (E.g.: Packed binaries and its packers)
name: Windows.Applications.DIEC description: | Execute DetectItEasy (console version) on specified paths and return rows of results to hunt/filter on binaries based types of files (E.g.: Packed binaries and its packers) author: Eduardo Mattos - @eduardfir reference: - https://github.com/horsicq/Detect-It-Easy type: CLIENT tools: - name: DIEC url: https://github.</description></item><item><title>Windows.Applications.FTKImager</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/ftkimager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/ftkimager/</guid><description>Create an E01 Image of the C drive using FTK Imager (Command Line Version)
SourceDriveToImage usually will be 0 (as in \.\PHYSICALDRIVE0) for the C: drive, on a Windows system.
If you intend to image the secondary drive, use, for example, SourceDriveToImage = 1, for \.\PHYSICALDRIVE1
name: Windows.Applications.FTKImager description: | Create an E01 Image of the C drive using FTK Imager (Command Line Version) SourceDriveToImage usually will be 0 (as in \\.</description></item><item><title>Windows.Applications.OfficeMacros.MacroRaptor</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/macroraptor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/macroraptor/</guid><description>This artifact implements OleTools MacroRaptor capability in VQL.
Use as a Hunt or triage capability.
Note: Targetting is by filename - may want to consider evasion by incorrect extension.
name: Windows.Applications.OfficeMacros.MacroRaptor author: Matt Green - @mgreen27 description: | This artifact implements OleTools MacroRaptor capability in VQL. Use as a Hunt or triage capability. Note: Targetting is by filename - may want to consider evasion by incorrect extension. reference: - http://www.decalage.info/mraptor - https://github.</description></item><item><title>Windows.Applications.OfficeServerCache</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/officeservercache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/officeservercache/</guid><description>Return Office Internet Server Cache Registry keys and values in order to identify possible C2 URLs from malicious opened Office documents.
Such keys should be written by exploits such as CVE-2021-40444 (Microsoft MSHTML Remote Code Execution Vulnerability)
name: Windows.Applications.OfficeServerCache description: | Return Office Internet Server Cache Registry keys and values in order to identify possible C2 URLs from malicious opened Office documents. Such keys should be written by exploits such as CVE-2021-40444 (Microsoft MSHTML Remote Code Execution Vulnerability) author: Eduardo Mattos - @eduardfir reference: - https://twitter.</description></item><item><title>Windows.AttackSimulation.AtomicRedTeam</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.attacksimulation.atomicredteam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.attacksimulation.atomicredteam/</guid><description>This artifact allows you to run Atomic Red Team tests on Windows endpoints using Invoke-AtomicRedTeam. Linux and MacOS endpoints will soon be supported.
NOTE: All tests may not work out OOB. You may notice interference or inoperability of some tests with Windows Defender/antivirus/EDR enabled. Best-effort checks are made using the built-in -GetPreReqs flag. This is an initial PoC, and as such, much testing is needed, and feedback is welcome.
Reference:</description></item><item><title>Windows.Binary.Exports</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/exports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/exports/</guid><description>This artifact can be used to extract all binary exports to research potential lolbins. Selecting the AllBinaryInfo tickbox will return complete Binary information.
name: Windows.Binary.Exports author: Matt Green - @mgreen27 description: | This artifact can be used to extract all binary exports to research potential lolbins. Selecting the AllBinaryInfo tickbox will return complete Binary information. type: CLIENT parameters: - name: TargetGlob default: C:/ProgramData/* description: Glob to target - name: AllBinaryInfo type: bool description: Select to extract all binary info sources: - query: | Let Targets = SELECT * FROM glob(globs=TargetGlob) WHERE NOT IsDir LET all_binary_info = SELECT dict(FullPath=FullPath,Name=Name,Size=Size,IsLink=IsLink) as FileDetails, dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as SI, parse_pe(file=FullPath) as BinaryInfo, authenticode(filename=FullPath) as Authenticode, hash(path=FullPath) as Hash FROM Targets WHERE BinaryInfo LET binary_exports = SELECT dict(FullPath=FullPath,Name=Name,Size=Size,IsLink=IsLink) as FileDetails, parse_pe(file=FullPath).</description></item><item><title>Windows.Bulk.File</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/bulkfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/bulkfile/</guid><description>Search for some simple bulk File IOCs and upload if desired. Typical upload workflow may be to firstly search, then if returned rows match expectations rerun query with upload tickbox selected.
NOTE: strings with comma &amp;ldquo;,&amp;rdquo; requre quotes.
IocLookupTable csv details:
Glob - &amp;ldquo;Quote&amp;rdquo; items with { glob } barckets. Whitelist - Velociraptor regex to whitelist FullPath field. Description - Free text
name: Windows.Bulk.File author: Matt Green - @mgreen27 description: | Search for some simple bulk File IOCs and upload if desired.</description></item><item><title>Windows.Carving.Emotet</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.emotet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.emotet/</guid><description>This artifact yara-scans memory or unpacked DLL samples for the new 2021 Emotet detections, decrypts and returns the C2 list.
You may select specific file paths or processes to be yara-scanned, or allow it to yara-scan all memory space.
Currently this artifact parses encrypted configurations from the Emotet variants introducted in November 2021. It will not parse the configurations from earlier variants.
NOTE: This content simply carves the configuration and does not unpack files on disk.</description></item><item><title>Windows.Carving.Hancitor</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.hancitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.hancitor/</guid><description>This artifact yara-scans memory or unpacked DLL samples for Hancitor trojan detections, decrypting and returning the Build ID and C2 list.
You may select specific file paths or processes to be yara-scanned, or simply allow it to yara-scan all running processes (default)
NOTE: This content simply carves the configuration and does not unpack files on disk. That means pointing this artifact as a packed or obfuscated file will not obtain the expected results.</description></item><item><title>Windows.Carving.IcedID</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.icedid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.icedid/</guid><description>This artifact yara-scans memory or unpacked DLL samples for IcedID trojan (also known as BokBot, or Anubis) detections, finds, decodes and returns the Campaign ID and C2 configurations.
You may select specific file paths or processes to be yara-scanned, or allow it to yara-scan all memory space.
NOTE: This content simply carves the configuration and does not unpack files on disk. That means pointing this artifact as a packed or obfuscated file will not obtain the expected results.</description></item><item><title>Windows.Carving.Qbot</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.qbot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.carving.qbot/</guid><description>This artifact yara-scans memory or unpacked DLL samples for Qbot (or Qakbot) detections, decrypts and returns the botnet and C2 configurations.
You may select specific file paths or processes to be yara-scanned, or allow it to yara-scan all memory space.
Currently this artifact parses encrypted configurations from the Qbot variant introducted in February 2022. It will identify, but not parse the configurations from earlier variants.
NOTE: This content simply carves the configuration and does not unpack files on disk.</description></item><item><title>Windows.Carving.SquirrelWaffle</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/squirrelwaffle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/squirrelwaffle/</guid><description>This artifact yara-scans memory or process dumps for unpacked SquirrelWaffle Dlls, decodes the configuration and returns the C2s and the payload.
Depending on the initial infection vector (the macro within .doc or .xls maldoc), SquirrelWaffle packed droper will be loaded by either rundll32 or regsvr32 and unpack itself in memory.
The decoded configurations found so far contain (1) a list of C2 URLS, (2*) may contain a list of C2 IPs, and lastly, (3) contains the command &amp;ldquo;regsvr32.</description></item><item><title>Windows.Detection.BinaryHunter</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/binaryhunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/binaryhunter/</guid><description>This artifact enables hunting for binary attributes.
The artifact takes a glob targetting input, then checks each file in scope for an MZ header. The artifact also queries Authenticode details and parses out PE attributes.
Both PE and Authenticode output can be queried for relevant strings using a regex filter and whitelist to hunt with. This enables unique capability to hunt for specific things such as PE imports, exports or other attributes.</description></item><item><title>Windows.Detection.PrintNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmare/</guid><description>This artifact returns any binaries in the Windows/spool/drivers/** folders with an untrusted Authenticode entry.
It can be used to hunt for dll files droped during exploitation of CVE-2021-1675 - PrintNightmare.
To query all attached ntfs drives: check the AllDrives switch.
I have added several filters to uplift search capabilities from the original MFT artifact. Due to the multi-drive features, the MFTPath will output the MFT path of the entry.
Available filters include:</description></item><item><title>Windows.Detection.ProxyLogon.ProxyShell</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.detection.proxylogon.proxyshell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.detection.proxylogon.proxyshell/</guid><description>This artifact hunts for CVE-2021-27065 (Microsoft Exchange ProxyLogon RCE) and CVE-2021-31207 (Microsoft Exchange ProxyShell RCE) exploitation by parsing entries in the &amp;lsquo;MSExchange Management.evtx&amp;rsquo; log.
This log file is unique to Exchange and can be useful when ECP logs are no longer available.
ProxyLogon webshell detection syntax is specific to &amp;lsquo;China Chopper&amp;rsquo; via the PowerShell &amp;lsquo;Set-OabVirtualDirectory&amp;rsquo; cmdlet.
ProxyShell webshell detection syntax is specific to PowerShell &amp;lsquo;New-MailboxExportRequest&amp;rsquo; and &amp;lsquo;New-ExchangeCertificate&amp;rsquo; cmdlets.
name: Windows.Detection.ProxyLogon.ProxyShell description: | This artifact hunts for CVE-2021-27065 (Microsoft Exchange ProxyLogon RCE) and CVE-2021-31207 (Microsoft Exchange ProxyShell RCE) exploitation by parsing entries in the 'MSExchange Management.</description></item><item><title>Windows.Detection.USBYara</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/usbyara/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/usbyara/</guid><description>Run yara over usb when USB is plugged into machine. Return context and hit details.
This artifact requires:
Exchange.Windows.Monitor.USBPlugIn (imported from Exchange) Generic.Detection.Yara.Glob Yara rule deployed and target path can be modified.
name: Windows.Detection.USBYara author: Matt Green - @mgreen27 description: | Run yara over usb when USB is plugged into machine. Return context and hit details. This artifact requires: * Exchange.Windows.Monitor.USBPlugIn (imported from Exchange) * Generic.Detection.Yara.Glob Yara rule deployed and target path can be modified.</description></item><item><title>Windows.ETW.AMSI</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/amsi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/amsi/</guid><description>This artifact uses the ETW provider:
(Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67}
name: Windows.ETW.AMSI description: | This artifact uses the ETW provider: (Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67} type: CLIENT_EVENT parameters: - name: IocRegex description: &amp;quot;Regex of strings to filter for&amp;quot; default: . - name: WhitelistRegex description: &amp;quot;Regex of strings to witelist&amp;quot; - name: AppNameRegex description: &amp;quot;Application name Regex to enable filtering on source.&amp;quot; default: . sources: - query: | -- collect a small cache of process information for enrichment LET proc = cache(key='Pid', period=600, query={ SELECT Pid, Name, Exe,CommandLine, Username,TokenIsElevated FROM pslist() }) -- watch ETW provider and first round data manipulation LET hits = SELECT *, timestamp(epoch=timestamp(string=System.</description></item><item><title>Windows.ETW.DetectProcessSpoofing</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.etw.detectprocessspoofing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.etw.detectprocessspoofing/</guid><description>Detects Process parent spoofing such as SelectMyParent.exe or Cobalt Strike select PPID.
NOTE: for short lasting processes it is expected to report NULL for CommandLine and Username fields as enrichment failed.
name: Windows.ETW.DetectProcessSpoofing description: | Detects Process parent spoofing such as SelectMyParent.exe or Cobalt Strike select PPID. NOTE: for short lasting processes it is expected to report NULL for CommandLine and Username fields as enrichment failed. reference: - https://blog.f-secure.com/detecting-parent-pid-spoofing/ - https://www.</description></item><item><title>Windows.ETW.WMIEventing</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/wmieventing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/wmieventing/</guid><description>This artifact collects events associated with creation and deletion of WMI Event Consumers. All Event Consumers created under any namespace will generate events which are filtered on event consumer classes.
It uses the ETW provider: Microsoft-Windows-WMI-Activity {1418ef04-b0b4-4623-bf7e-d74ab47bbdaa}
Note: This provider events have support on Windows 10+
name: Windows.ETW.WMIEventing author: Matt Green - @mgreen27 description: | This artifact collects events associated with creation and deletion of WMI Event Consumers. All Event Consumers created under any namespace will generate events which are filtered on event consumer classes.</description></item><item><title>Windows.EventLogs.Chainsaw</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.chainsaw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.chainsaw/</guid><description>This artifact leverages Chainsaw to enable usage of Sigma rules (in addition to built-in rules) to faciliate detection within Windows Event Logs.
From the project&amp;rsquo;s description:
&amp;ldquo;Chainsaw provides a powerful âfirst-responseâ capability to quickly identify threats within Windows event logs. It offers a generic and fast method of searching through event logs for keywords, and by identifying threats using built-in detection logic and via support for Sigma detection rules.&amp;rdquo;
https://github.com/countercept/chainsaw</description></item><item><title>Windows.EventLogs.CondensedAccountUsage</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/condensedaccountusage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/condensedaccountusage/</guid><description>This artifact will extract condensed information on logon / logoff events.
Security channel - EventIDs in 4624, 4625, 4634, 4647, 4648, 4672, 4778, 4779, 4800, 4801, 4802, and 4803.
Exclude by default events related to:
UserName egal to SYSTEM, ANONYMOUS LOGON, LOCAL SERVICE, NETWORK SERVICE, or %ComputerName%$. Domain egal to NT AUTHORITY, Font Driver Host, or Window Manager. Inspired from work by Brian Maloney and @0x47617279.
Thanks to Mike Cohen (scudette) for its help optimizing the query.</description></item><item><title>Windows.EventLogs.RecordIDCheck</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/recordidcheck/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/recordidcheck/</guid><description>This artifact will compare EventLog records and report on abnormalities in RecordID sequence and optional time gap. The artifact can be used for both hunting, remote or local analysis.
There are several parameter&amp;rsquo;s available.
EvtxGlob glob of EventLogs to target. Default to all but can be targeted. PathRegex enables filtering on evtx path for specific log targetting. DateAfter enables search for events after this date. DateBefore enables search for events before this date.</description></item><item><title>Windows.EventLogs.Telerik</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/telerik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/telerik/</guid><description>This Artifact will hunt for evidence of Telerik exploitation in the Application Event Log.
Telerik is a commonly exploited component of IIS web pages that has been actively targeted by actors via several CVEs. Several tools and attack capabilities exist making exploitation of vulnerable services trivial. Due to the nature of the software and typical deployments the patches may require manual application.
IocRegex enables searching for regex in the whole EventData field.</description></item><item><title>Windows.EventLogs.Zircolite</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.zircolite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.zircolite/</guid><description>Zircolite is a standalone tool that can be used to apply Sigma rules to EVTX files on endpoints in an effort to quickly parse large datasets and surface detections.
You can read more about Zircolite below:
https://github.com/wagga40/Zircolite
This artifact currently supports usage of the built-in rulesets. Support for custom ruleset usage will be added in the future.
NOTE: This artifact may take several minutes to run, depending on the size of EVTX files being analyzed.</description></item><item><title>Windows.Memory.HollowsHunter</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/hollowshunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/hollowshunter/</guid><description>Use hollows_hunter to detect suspicious process injections.
Upload any findings to the server, including process dumps.
name: Windows.Memory.HollowsHunter description: | Use hollows_hunter to detect suspicious process injections. Upload any findings to the server, including process dumps. tools: - name: hollows_hunter github_project: hasherezade/hollows_hunter github_asset_regex: hollows_hunter64.exe serve_locally: true precondition: SELECT OS From info() where OS = 'windows' sources: - name: Output query: | -- Get the path to the hollows_hunter tool and a fresh temp directory.</description></item><item><title>Windows.Memory.InjectedThread</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/get-injectedthread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/get-injectedthread/</guid><description>Use Get-InjetedThreads to detect process injections. Note: this query is complex powershell. Run it after a scriptblock hunt.
https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2 https://gist.github.com/mgreen27/1982aaae37a7afdd047db619bf17c8a1
name: Windows.Memory.InjectedThread author: &amp;quot;Matt Green - @mgreen27&amp;quot; description: | Use Get-InjetedThreads to detect process injections. Note: this query is complex powershell. Run it after a scriptblock hunt. https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2 https://gist.github.com/mgreen27/1982aaae37a7afdd047db619bf17c8a1 tools: - name: Get-InjectedThread precondition: SELECT OS From info() where OS = 'windows' sources: - query: | -- Get the path to the Get-InjectedThread tool LET script &amp;lt;= SELECT FullPath FROM Artifact.</description></item><item><title>Windows.Monitor.USBPlugIn</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/usbplugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/usbplugin/</guid><description>Monitor for plug in of USB volume. Output drive letter for additional enrichment artifacts
name: Windows.Monitor.USBPlugIn description: | Monitor for plug in of USB volume. Output drive letter for additional enrichment artifacts type: CLIENT_EVENT sources: - query: | SELECT timestamp(winfiletime=int(int=Parse.TIME_CREATED)) as TimeCreated, Parse.DriveName as DriveName, Parse.EventType as EventType, Parse.__Type as Source, Raw FROM wmi_events( query=&amp;quot;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2&amp;quot;, namespace=&amp;quot;ROOT/CIMV2&amp;quot;, wait=50000000)</description></item><item><title>Windows.Monitoring.PrintNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmaremonitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmaremonitor/</guid><description>This artifact returns ETW PrintService events for potential PrintNightmare activity. CVE-2021-1675 and CVE-2021-34527
It monitors for DRIVER_ADDED events and enriches with binary information for payload DataFile. Hunt for unexpected drivers with malicious DataFiles.
name: Windows.Monitoring.PrintNightmare author: Matt Green - @mgreen27 description: | This artifact returns ETW PrintService events for potential PrintNightmare activity. CVE-2021-1675 and CVE-2021-34527 It monitors for DRIVER_ADDED events and enriches with binary information for payload DataFile. Hunt for unexpected drivers with malicious DataFiles.</description></item><item><title>Windows.NTFS.MFT.HiveNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.ntfs.mft.hivenightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.ntfs.mft.hivenightmare/</guid><description>This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to find several files created as part of the POC tooling for HiveNightmare (CVE-2021-36934):
\hive_sam_ - https://github.com/FireFart/hivenightmare \SAM-20 - https://github.com/GossiTheDog/HiveNightmare \SAM-haxx - https://github.com/GossiTheDog/HiveNightmare \Sam.save - PowerShell version \Sam.hive - https://github.com/WiredPulse/Invoke-HiveNightmare C:\windows\temp\sam - https://github.com/cube0x0/CVE-2021-36934 See Florian Roth&amp;rsquo;s rule here:
https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/win_hivenightmare_file_exports.yml name: Windows.NTFS.MFT.HiveNightmare description: | This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to find several files created as part of the POC tooling for HiveNightmare (CVE-2021-36934): - \hive_sam_ - https://github.</description></item><item><title>Windows.Registry.AteraNetworks</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/ateranetworks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/ateranetworks/</guid><description>Find AteraNetworks configuration details in the registry. This artifact is best combined with Windows.Forensics.FilenameSearch searching for the string &amp;ldquo;atera&amp;rdquo;.
name: Windows.Registry.AteraNetworks description: | Find AteraNetworks configuration details in the registry. This artifact is best combined with Windows.Forensics.FilenameSearch searching for the string &amp;quot;atera&amp;quot;. author: original author Eduardo Mattos - @eduardfir reference: - https://www.advanced-intel.com/post/secret-backdoor-behind-conti-ransomware-operation-introducing-atera-agent precondition: SELECT * FROM info() where OS = 'windows' parameters: - name: SearchRegistryGlob default: \HKEY_LOCAL_MACHINE\SOFTWARE\ATERA Networks\AlphaAgent\** description: Use a glob to define the registry hives that will be searched.</description></item><item><title>Windows.Registry.BackupRestore</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/backuprestore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/backuprestore/</guid><description>This artifact will return BackupRestore configuration.
Applications that request or perform backup and restore operations can use these keys to communicate with each other or with features such as the Volume Shadow Copy Service (VSS) and Windows Backup.
name: Windows.Registry.BackupRestore author: Matt Green - @mgreen27 description: | This artifact will return BackupRestore configuration. Applications that request or perform backup and restore operations can use these keys to communicate with each other or with features such as the Volume Shadow Copy Service (VSS) and Windows Backup.</description></item><item><title>Windows.Registry.CapabilityAccessManager</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.registry.capabilityaccessmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.registry.capabilityaccessmanager/</guid><description>The ConsentStore in CapabilityAccessManager can provide insight to what resources binaries have had access to, such as the microphone and webcam. This artefact returns non-Microsoft executables (ie: entries listed in the NonPackaged path).
Additional Resources:
https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072 https://thinkdfir.com/2022/01/04/i-can-see-and-hear-you-seeing-and-hearing-me/ Tags: #windows #registry
name: Windows.Registry.CapabilityAccessManager description: | The ConsentStore in CapabilityAccessManager can provide insight to what resources binaries have had access to, such as the microphone and webcam. This artefact returns non-Microsoft executables (ie: entries listed in the `NonPackaged` path).</description></item><item><title>Windows.Registry.CVE_2021_40444</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/cve_2021_40444/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/cve_2021_40444/</guid><description>This artifact will enable both application and removal of the reccomended mitigation for CVE-2021-40444.
Disabling the installation of all ActiveX controls in Internet Explorer mitigates this attack. This can be accomplished for all sites by updating the registry. Previously-installed ActiveX controls will continue to run, but do not expose this vulnerability.
To disable installing ActiveX controls in Internet Explorer in all zones
[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\0] &amp;quot;1001&amp;quot;=dword:00000003 &amp;quot;1004&amp;quot;=dword:00000003 [HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\1] &amp;quot;1001&amp;quot;=dword:00000003 &amp;quot;1004&amp;quot;=dword:00000003 [HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\2] &amp;quot;1001&amp;quot;=dword:00000003 &amp;quot;1004&amp;quot;=dword:00000003 [HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\3] &amp;quot;1001&amp;quot;=dword:00000003 &amp;quot;1004&amp;quot;=dword:00000003 This sets the URLACTION_DOWNLOAD_SIGNED_ACTIVEX (0x1001) and URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX (0x1004) to DISABLED (3) for all internet zones for 64-bit and 32-bit processes.</description></item><item><title>Windows.Registry.HiddenUsers</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/hiddenusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/hiddenusers/</guid><description>Find hidden user accounts through registry values on the filesystem.
In Windows, adversaries may hide user accounts via settings in the Registry. For example, an adversary may add a value to the Windows Registry (via Reg or other means) that will hide the user &amp;ldquo;test&amp;rdquo; from the Windows login screen:
reg.exe ADD &amp;lsquo;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccountsUserList&amp;rsquo; /v test /t REG_DWORD /d 0 /f.
ATT&amp;amp;CK tactic: Defense Evasion, Hide Artifacts: Hidden Users ATT&amp;amp;CK technique: T1564.</description></item><item><title>Windows.Remediation.PrintSpooler</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printspoolerremediation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printspoolerremediation/</guid><description>This artifact will enable mitigation of PrintSpooler exploitation used by PrintNightmare - CVE-2021-34527 and CVE-2021-1675.
There are two selectable mitigations:
disabling the print spooler service. HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Spooler\Start = 4 (service disabled).
disable remote registration of the spool service. HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Printers\RegisterSpoolerRemoteRpcEndPoint = 2 (RegisterSpoolerRemoteRpcEndPoint disables).
NOTE: ChangeServiceStartup will set to disable, not stop the printspool service. Its always reccomended to use group policy to deploy these settings.</description></item><item><title>Windows.System.AccessControlList</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.system.accesscontrollist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.system.accesscontrollist/</guid><description>This artifact displays the access control lists of files.
Note: This artifact uses Powershell to gather the information.
name: Windows.System.AccessControlList description: | This artifact displays the access control lists of files. Note: This artifact uses Powershell to gather the information. type: CLIENT parameters: - name: Glob description: A search expression that will be passed to Powershell default: C:\Windows\System32\Config\s* - name: ACLFilter description: Only show files with ACLs that match this regex.</description></item><item><title>Windows.System.BinaryVersion</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/binaryversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/binaryversion/</guid><description>Extract the binary version information for binary files. This artifact will search the MFT for any matching filenames and return binary information.
name: Windows.System.BinaryVersion author: &amp;quot;Matt Green - @mgreen27&amp;quot; description: | Extract the binary version information for binary files. This artifact will search the MFT for any matching filenames and return binary information. parameters: - name: TargetBinary default: 'kernel32.dll' sources: - precondition: SELECT OS From info() where OS = 'windows' query: | LET hits = SELECT FileName, strip(string=split(string=MFTPath,sep='\\$MFT')[0], prefix='\\\\.</description></item><item><title>Windows.System.PowerEfficiencyDiagnostics</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/powerefficiencydiagnostics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/powerefficiencydiagnostics/</guid><description>This artifact parses the XML Energy Reports from the Power Efficiency Diagnostics feature of Windows, returning the processes which had high CPU usage, including which
Some tools utilized by threat actors will generate high CPU usage and so are recorded in these reports.
name: Windows.System.PowerEfficiencyDiagnostics author: &amp;quot;Eduardo Mattos - @eduardfir&amp;quot; description: | This artifact parses the XML Energy Reports from the Power Efficiency Diagnostics feature of Windows, returning the processes which had high CPU usage, including which Some tools utilized by threat actors will generate high CPU usage and so are recorded in these reports.</description></item><item><title>Windows.System.PrinterDriver</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printerdriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printerdriver/</guid><description>This artifact will enumerate installed PrintDrivers using the Win32_PrinterDriver wmi class and parse each DriverPath, ConfigFile and DataFile.
Hunt by searching for untrusted binaries or suspicious removed binararies for evidence of previous exploitation.
name: Windows.System.PrinterDriver author: Matt Green - @mgreen27 description: | This artifact will enumerate installed PrintDrivers using the Win32_PrinterDriver wmi class and parse each DriverPath, ConfigFile and DataFile. Hunt by searching for untrusted binaries or suspicious removed binararies for evidence of previous exploitation.</description></item><item><title>Windows.System.WMIProviders</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.system.wmiproviders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.system.wmiproviders/</guid><description>List the WMI providers in the system.
It is possible to laterally move by installing a fake provider in the system, and then calling it remotely. This artifact enumerates all WMI providers and recovers the binary that runs when loaded.
Test using https://github.com/Cybereason/Invoke-WMILM (Will run as SYSTEM)
Invoke-WMILM -Target localhost -Type Provider -Name notepad -Username test -Password test -Command notepad.exe name: Windows.System.WMIProviders description: | List the WMI providers in the system.</description></item></channel></rss>