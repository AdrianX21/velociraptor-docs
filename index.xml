<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/</link><description>Recent content in Welcome on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Jun 2021 07:11:04 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/index.xml" rel="self" type="application/rss+xml"/><item><title>The Velociraptor API and FUSE</title><link>https://docs.velociraptor.app/blog/html/2019/08/28/the_velociraptor_api/</link><pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2019/08/28/the_velociraptor_api/</guid><description>This page is written about a very old version of Velociraptor and is retained for historical purposes. Currently the fuse feature was removed.
The Velociraptor GUI is very useful, but for the power user, the Velociraptor API provides a powerful mechanism to integrate and automate. We previously discussed how the Velociraptor API can be used by external programs. This post explore a sample program that uses the API and presents a client&amp;rsquo;s VFS as a FUSE directory.</description></item><item><title>Velociraptor Interactive Shell</title><link>https://docs.velociraptor.app/blog/html/2018/12/11/velociraptor_interactive_shell/</link><pubDate>Tue, 11 Dec 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/12/11/velociraptor_interactive_shell/</guid><description>One of the interesting new features in the latest release of Velociraptor is an interactive shell. One can interact with the end point over the standard Velociraptor communication mechanism - an encrypted and authenticated channel.
This feature is implemented by utilizing the Velociraptor event monitoring, server side VQL queries. This post explores how these components come together to deliver a responsive, interactive workflow.
Endpoint shell access Although we generally try to avoid it, sometimes the easiest way to extract certain information is to run a command and parse its output.</description></item><item><title>More on client event collection</title><link>https://docs.velociraptor.app/blog/html/2018/12/09/more_on_client_event_collection/</link><pubDate>Sun, 09 Dec 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/12/09/more_on_client_event_collection/</guid><description>Periodic Event queries The simplest kind of events are periodically generated events. These are created using the clock() VQL plugin. This is a simple event plugin which just emits a new row periodically.
$ velociraptor query &amp;quot;select Unix from clock(period=5)&amp;quot; --max_wait 1 [ { &amp;quot;Unix&amp;quot;: 1544339715 } ][ { &amp;quot;Unix&amp;quot;: 1544339720 } ]^C The query will never terminate, instead the clock() plugin will emit a new timestamp every 5 seconds.</description></item><item><title>Velociraptor training at NZITF</title><link>https://docs.velociraptor.app/blog/html/2018/11/13/velociraptor_training_at_nzitf/</link><pubDate>Tue, 13 Nov 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/11/13/velociraptor_training_at_nzitf/</guid><description>Velociraptor training at NZITF We are very excited to run this full day training workshop at the New Zealand Internet Engineering Task Force (NZITF) conference.
The training material can be downloaded here &amp;quot;Velociraptor NZITF training&amp;quot;.</description></item><item><title>Velociraptor walk through and demo</title><link>https://docs.velociraptor.app/blog/html/2018/09/03/velociraptor_walk_through_and_demo/</link><pubDate>Mon, 03 Sep 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/09/03/velociraptor_walk_through_and_demo/</guid><description>I just uploaded a screencast of the latest Velociraptor - check it out and play with it, and please provide feedback at velociraptor-discuss@googlegroups.com</description></item><item><title>Files, files everything is just a file!</title><link>https://docs.velociraptor.app/blog/html/2018/08/10/files_files_everything_is_just_a_file/</link><pubDate>Fri, 10 Aug 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/08/10/files_files_everything_is_just_a_file/</guid><description>GRR's original design abstracted the data storage to a simple key/value store originally based around Bigtable. For open source deployments various key value stores were used starting from MongoDB, to SQLite and finally MySQL. Although the original idea was to use a simple key/value implementation, due to locking requirements the data store implementation became very complex.
As Velociraptor introduced a major redesign of the underlying data store architecture, we are now able to relax our demands of the datastore and use a true key/value model (since we have no requirements for locking and synchronization).</description></item><item><title>Velocidex Query Language (VQL)</title><link>https://docs.velociraptor.app/blog/html/2018/08/10/the_velocidex_query_language/</link><pubDate>Fri, 10 Aug 2018 04:10:06 +0000</pubDate><guid>https://docs.velociraptor.app/blog/html/2018/08/10/the_velocidex_query_language/</guid><description>This page is written about a very old version of VQL and is retained for historical purposes. Current VQL works differently - consult the current documentation.
VQL Overview VQL is only loosely based around SQL in the sense that the general statement structure is similar. However, VQL is a very simple dialect. Like SQL, a VQL query produces a table of results with specific columns and multiple rows.</description></item><item><title>Binparsergen</title><link>https://docs.velociraptor.app/golang/binparsergen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/binparsergen/</guid><description/></item><item><title>Custom.Label.User</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/custom.label.user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/custom.label.user/</guid><description>This artifact watches for new client enrolments and automatically label the client with the required label if the user exists.
This artifact can be the starting point for automatically labeling a machine based on any other property - just change the artifact to watch and the result filter.
#server #event #labels
name: Custom.Label.User description: | This artifact watches for new client enrolments and automatically label the client with the required label if the user exists.</description></item><item><title>Custom.Server.Slack.Clients.Enrolled</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/custom.server.slack.clients.enrolled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/custom.server.slack.clients.enrolled/</guid><description>Send a message to slack when clients become enrolled.
This artifact triggers when a client is interrogated within 60 seconds of it being seen for the first time.
name: Custom.Server.Slack.Clients.Enrolled description: | Send a message to slack when clients become enrolled. This artifact triggers when a client is interrogated within 60 seconds of it being seen for the first time. type: SERVER_EVENT parameters: - name: FirstSeenDelay default: &amp;quot;60&amp;quot; type: int description: | The time between first_seen_time and Generic.</description></item><item><title>Custom.Windows.Memory.HollowsHunter</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/hollowshunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/hollowshunter/</guid><description>Use hollows_hunter to detect suspicious process injections.
Upload any findings to the server, including process dumps.
name: Custom.Windows.Memory.HollowsHunter description: | Use hollows_hunter to detect suspicious process injections. Upload any findings to the server, including process dumps. tools: - name: hollows_hunter github_project: hasherezade/hollows_hunter github_asset_regex: hollows_hunter64.exe serve_locally: true sources: - precondition: SELECT OS From info() where OS = 'windows' query: | -- Get the path to the hollows_hunter tool and a fresh temp directory.</description></item><item><title>Custom.Windows.Memory.InjectedThread</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/get-injectedthread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/get-injectedthread/</guid><description>Use Get-InjetedThreads to detect process injections. Note: this query is complex powershell. Run it after a scriptblock hunt.
https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2 https://gist.github.com/mgreen27/1982aaae37a7afdd047db619bf17c8a1
name: Custom.Windows.Memory.InjectedThread author: &amp;quot;Matt Green - @mgreen27&amp;quot; description: | Use Get-InjetedThreads to detect process injections. Note: this query is complex powershell. Run it after a scriptblock hunt. https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2 https://gist.github.com/mgreen27/1982aaae37a7afdd047db619bf17c8a1 tools: - name: Get-InjectedThread precondition: SELECT OS From info() where OS = 'windows' sources: - query: | -- Get the path to the Get-InjectedThread tool LET script &amp;lt;= SELECT FullPath FROM Artifact.</description></item><item><title>Custom.Windows.System.AccessControlList</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/custom.windows.system.accesscontrollist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/custom.windows.system.accesscontrollist/</guid><description>This artifact displays the access control lists of files.
Note: This artifact uses Powershell to gather the information.
name: Custom.Windows.System.AccessControlList description: | This artifact displays the access control lists of files. Note: This artifact uses Powershell to gather the information. type: CLIENT parameters: - name: Glob description: A search expression that will be passed to Powershell default: C:\Windows\System32\Config\s* - name: ACLFilter description: Only show files with ACLs that match this regex.</description></item><item><title>Discord</title><link>https://docs.velociraptor.app/discord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/discord/</guid><description/></item><item><title>EVTX</title><link>https://docs.velociraptor.app/golang/evtx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/evtx/</guid><description/></item><item><title>Go ESE Parser</title><link>https://docs.velociraptor.app/golang/go-ese/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/go-ese/</guid><description/></item><item><title>Go YARA</title><link>https://docs.velociraptor.app/golang/go-yara/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/go-yara/</guid><description/></item><item><title>Go-NTFS</title><link>https://docs.velociraptor.app/golang/go-ntfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/go-ntfs/</guid><description/></item><item><title>Go-PE</title><link>https://docs.velociraptor.app/golang/go-pe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/go-pe/</guid><description/></item><item><title>Go-Prefetch</title><link>https://docs.velociraptor.app/golang/go-prefetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/go-prefetch/</guid><description/></item><item><title>HashRunKeys</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/hash_run_keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/hash_run_keys/</guid><description>Iterate over all the run keys and locate their binary then hash it.
Tags: #windows #registry #detection
name: HashRunKeys description: | Iterate over all the run keys and locate their binary then hash it. Tags: #windows #registry #detection parameters: - name: runKeys default: | HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Run\* - name: pathRegex type: hidden # Pick the first part - either quoted or not. default: &amp;gt;- (^&amp;quot;(?P&amp;lt;quoted_path&amp;gt;[^&amp;quot;]+)&amp;quot;|(?P&amp;lt;unquoted_path&amp;gt;^[^ ]+)) sources: - precondition: SELECT OS From info() where OS = 'windows' query: | LET paths = SELECT FullPath,Name, Data.</description></item><item><title>Linux.Memory.Acquisition</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linuxmemoryacquisition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linuxmemoryacquisition/</guid><description>Acquires a full memory image. We download LiME and use it to acquire a full memory image.
NOTE: This artifact usually transfers a lot of data. You should increase the default timeout to allow it to complete. ( Example : 2Gb of memory time takes about 50s )
name: Linux.Memory.Acquisition author: URCA (Corentin Garcia / Emmanuel Mesnard) description: | Acquires a full memory image. We download LiME and use it to acquire a full memory image.</description></item><item><title>Linux.Network.Netstat</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/linux.network.netstat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/linux.network.netstat/</guid><description>This artifact will parse /proc and reveal information about current network connections.
name: Linux.Network.Netstat description: | This artifact will parse /proc and reveal information about current network connections. type: CLIENT parameters: - name: StateRegex default: &amp;quot;Listening|Established&amp;quot; description: Only show these states sources: - precondition: SELECT OS From info() where OS = 'linux' query: | -- Break down the address of the form 0100007F:22B9 LET _X(x) = parse_string_with_regex(string=addr, regex=&amp;quot;(..)(..)(..)(..):(....)&amp;quot;) -- Unroll hex encoded IPv4 address into more usual form.</description></item><item><title>Linux.Volatility.Create.Profile</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/volatility_profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/volatility_profile/</guid><description>This artifact is used to create the profile to the environnements Debian / Ubuntu.
name: Linux.Volatility.Create.Profile author: URCA (Corentin Garcia / Emmanuel Mesnard) description: | This artifact is used to create the profile to the environnements Debian / Ubuntu. required_permissions: - EXECVE tools: - name: Volatility url: https://github.com/volatilityfoundation/volatility/archive/master.zip parameters: - name: Zipname type: string default: Ubuntu precondition: SELECT OS From info() where OS = 'linux' sources: - queries: - LET dirtmp = tempdir(remove_last=true) LET vola = SELECT * FROM execve(argv=['bash', '-c', 'mv /tmp/master.</description></item><item><title>OleParser</title><link>https://docs.velociraptor.app/golang/oleparse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/oleparse/</guid><description/></item><item><title>Regparser</title><link>https://docs.velociraptor.app/golang/regparser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/regparser/</guid><description/></item><item><title>Server.Import.ArtifactExchange</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/server.import.artifactexchange/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/server.import.artifactexchange/</guid><description>This artifact will automatically import the latest artifact exchange bundle into the current server.
name: Server.Import.ArtifactExchange description: | This artifact will automatically import the latest artifact exchange bundle into the current server. type: SERVER required_permissions: - SERVER_ADMIN parameters: - name: ExchangeURL default: https://github.com/Velocidex/velociraptor-docs/raw/gh-pages/exchange/artifact_exchange.zip - name: Prefix description: Add artifacts with this prefix default: Exchange sources: - query: | LET X = SELECT artifact_set(prefix=Prefix, definition=Definition) AS Definition FROM foreach(row={ SELECT Content FROM http_client( remove_last=TRUE, tempfile_extension=&amp;quot;.</description></item><item><title>Timetracker</title><link>https://docs.velociraptor.app/golang/timetracker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/timetracker/</guid><description/></item><item><title>Velociraptor</title><link>https://docs.velociraptor.app/golang/velociraptor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/velociraptor/</guid><description/></item><item><title>Vfilter</title><link>https://docs.velociraptor.app/golang/vfilter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/vfilter/</guid><description/></item><item><title>Vtypes</title><link>https://docs.velociraptor.app/golang/vtypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/golang/vtypes/</guid><description/></item><item><title>Windows.ActiveDirectory.PrivilegedUsers</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/activedirectoryprivilegedusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/activedirectoryprivilegedusers/</guid><description>If on a Domain Controller (ProductType = 2), recursively enumerate membership of privileged groups, then for each user, collect details relevant to an investigation: Create Date, Last Logon, Group Membership, SID
If not on a Domain Controller, return nothing
name: Windows.ActiveDirectory.PrivilegedUsers author: liteman @kevinfosec description: | If on a Domain Controller (ProductType = 2), recursively enumerate membership of privileged groups, then for each user, collect details relevant to an investigation: Create Date, Last Logon, Group Membership, SID If not on a Domain Controller, return nothing type: CLIENT sources: - precondition: SELECT OS From info() where OS = 'windows' query: | LET info &amp;lt;= SELECT * from info() LET script &amp;lt;= ' $prodtype = Get-WmiObject -Class Win32_OperatingSystem | Select -ExpandProperty ProductType if ($prodType -eq 2) { import-module activedirectory $users = @() $groups = @(&amp;quot;Domain Admins&amp;quot;, &amp;quot;Enterprise Admins&amp;quot;, &amp;quot;Administrators&amp;quot;, &amp;quot;Schema Admins&amp;quot;, &amp;quot;Account Operators&amp;quot;, &amp;quot;Backup Operators&amp;quot;, &amp;quot;Print Operators&amp;quot;, &amp;quot;Server Operators&amp;quot;, &amp;quot;Cert Publishers&amp;quot;) foreach ($group in $groups) { foreach ($user in @(Get-AdGroupMember -Identity $group -Recursive)) { if (-Not $users.</description></item><item><title>Windows.Applications.FTKImager</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/ftkimager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/ftkimager/</guid><description>Create an E01 Image of the C drive using FTK Imager (Command Line Version)
SourceDriveToImage usually will be 0 (as in \.\PHYSICALDRIVE0) for the C: drive, on a Windows system.
If you intend to image the secondary drive, use, for example, SourceDriveToImage = 1, for \.\PHYSICALDRIVE1
name: Windows.Applications.FTKImager description: | Create an E01 Image of the C drive using FTK Imager (Command Line Version) SourceDriveToImage usually will be 0 (as in \\.</description></item><item><title>Windows.Detection.PrintNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmare/</guid><description>This artifact returns any binaries in the Windows/spool/drivers/** folders with an untrusted Authenticode entry.
It can be used to hunt for dll files droped during exploitation of CVE-2021-1675 - PrintNightmare.
To query all attached ntfs drives: check the AllDrives switch.
I have added several filters to uplift search capabilities from the original MFT artifact. Due to the multi-drive features, the MFTPath will output the MFT path of the entry.
Available filters include:</description></item><item><title>Windows.ETW.AMSI</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/amsi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/amsi/</guid><description>This artifact uses the ETW provider: (Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67}
name: Windows.ETW.AMSI description: | This artifact uses the ETW provider: (Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67} type: CLIENT_EVENT parameters: - name: IocRegex description: &amp;quot;Regex of strings to filter for&amp;quot; default: . - name: WhitelistRegex description: &amp;quot;Regex of strings to witelist&amp;quot; - name: AppNameRegex description: &amp;quot;Application name Regex to enable filtering on source.&amp;quot; default: . sources: - query: | -- collect a small cache of process information for enrichment LET proc = cache(key='Pid', period=600, query={ SELECT Pid, Name, Exe,CommandLine, Username,TokenIsElevated FROM pslist() }) -- watch ETW provider and first round data manipulation LET hits = SELECT *, timestamp(epoch=timestamp(string=System.</description></item><item><title>Windows.ETW.DetectProcessSpoofing</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.etw.detectprocessspoofing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.etw.detectprocessspoofing/</guid><description>Detects Process parent spoofing such as SelectMyParent.exe, Cobalt Strike PPID spoofing etc.
name: Windows.ETW.DetectProcessSpoofing description: | Detects Process parent spoofing such as SelectMyParent.exe, Cobalt Strike PPID spoofing etc. reference: - https://blog.f-secure.com/detecting-parent-pid-spoofing/ - https://www.youtube.com/watch?v=DOe7WTuJ1Ac type: CLIENT_EVENT sources: - precondition: SELECT OS From info() where OS = 'windows' query: | -- Create a FIFO for short lived processes -- hold process logs in memory for 60 seconds. LET RecentProcesses = SELECT * FROM fifo(query={ SELECT System.</description></item><item><title>Windows.EventLogs.Chainsaw</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.chainsaw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.chainsaw/</guid><description>This artifact leverages Chainsaw to enable usage of Sigma rules (in addition to built-in logic) to faciliate detection within Windows Event Logs.
From the project&amp;rsquo;s description:
&amp;ldquo;Chainsaw provides a powerful ‘first-response’ capability to quickly identify threats within Windows event logs. It offers a generic and fast method of searching through event logs for keywords, and by identifying threats using built-in detection logic and via support for Sigma detection rules.&amp;rdquo;
https://github.com/countercept/chainsaw</description></item><item><title>Windows.Monitoring.PrintNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmaremonitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printnightmaremonitor/</guid><description>This artifact returns ETW PrintService events for potential PrintNightmare activity.
CVE-2021-1675 and CVE-2021-34527
It monitors for DRIVER_ADDED events and enriches with binary information for payload DataFile. Hunt for unexpected drivers with malicious DataFiles.
name: Windows.Monitoring.PrintNightmare author: Matt Green - @mgreen27 description: | This artifact returns ETW PrintService events for potential PrintNightmare activity. CVE-2021-1675 and CVE-2021-34527 It monitors for DRIVER_ADDED events and enriches with binary information for payload DataFile. Hunt for unexpected drivers with malicious DataFiles.</description></item><item><title>Windows.NTFS.MFT.HiveNightmare</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/windows.ntfs.mft.hivenightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/windows.ntfs.mft.hivenightmare/</guid><description>This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to find several files created as part of the POC tooling for HiveNightmare (CVE-2021-36934):
\hive_sam_ - https://github.com/FireFart/hivenightmare \SAM-20 - https://github.com/GossiTheDog/HiveNightmare \SAM-haxx - https://github.com/GossiTheDog/HiveNightmare \Sam.save - PowerShell version \Sam.hive - https://github.com/WiredPulse/Invoke-HiveNightmare C:\windows\temp\sam - https://github.com/cube0x0/CVE-2021-36934 See Florian Roth&amp;rsquo;s rule here: https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/win_hivenightmare_file_exports.yml name: Windows.NTFS.MFT.HiveNightmare description: | This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to find several files created as part of the POC tooling for HiveNightmare (CVE-2021-36934): - \hive_sam_ - https://github.</description></item><item><title>Windows.Remediation.PrintSpooler</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printspoolerremediation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printspoolerremediation/</guid><description>This artifact will enable mitigation of PrintSpooler exploitation used by PrintNightmare - CVE-2021-34527 and CVE-2021-1675.
There are two selectable mitigations:
disabling the print spooler service.
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Spooler\Start = 4 (service disabled).
disable remote registration of the spool service. HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Printers\RegisterSpoolerRemoteRpcEndPoint = 2 (RegisterSpoolerRemoteRpcEndPoint disables).
NOTE: ChangeServiceStartup will set to disable, not stop the printspool service. Its always reccomended to use group policy to deploy these settings.</description></item><item><title>Windows.System.PrinterDriver</title><link>https://docs.velociraptor.app/exchange/artifacts/pages/printerdriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/exchange/artifacts/pages/printerdriver/</guid><description>This artifact will enumerate installed PrintDrivers using the Win32_PrinterDriver wmi class and parse each DriverPath, ConfigFile and DataFile.
Hunt by searching for untrusted binaries or suspicious removed binararies for evidence of previous exploitation.
name: Windows.System.PrinterDriver author: Matt Green - @mgreen27 description: | This artifact will enumerate installed PrintDrivers using the Win32_PrinterDriver wmi class and parse each DriverPath, ConfigFile and DataFile. Hunt by searching for untrusted binaries or suspicious removed binararies for evidence of previous exploitation.</description></item></channel></rss>