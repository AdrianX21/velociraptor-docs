<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Detection on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/tags/detection/</link><description>Recent content in Detection on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 09 Nov 2021 04:54:00 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/tags/detection/index.xml" rel="self" type="application/rss+xml"/><item><title>Cobalt Strike payload discovery and data manipulation in VQL</title><link>https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/</link><pubDate>Tue, 09 Nov 2021 04:54:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-11-09-vql-data-manipulation/</guid><description>Velociraptor’s ability for data manipulation is a core platform capability that drives a lot of the great content we have available in terms of data parsing for artifacts and live analysis. After a recent engagement with less common encoded Cobalt Strike beacons, and finding sharable files on VirusTotal, I thought it would be a good opportunity to walk through some workflow around data manipulation with VQL for analysis. In this post I will walk though some background, collection at scale, and finally talk about processing target files to extract key indicators.</description></item><item><title>Velociraptor vs Printnightmare</title><link>https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/</link><pubDate>Sun, 11 Jul 2021 18:13:50 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/</guid><description>Hunting a Zero day! Velociraptor is an advanced open source endpoint visibility framework based on a flexible query language called VQL. What makes Velociraptor unique from other endpoint tools is the flexibility to develop new queries to address emerging threats.
This post walks through a common use case for Velociraptor’s VQL: detecting exploitation of a new zero day (A newly announced vulnerability without a patch available). Once a zero day has been announced, time is of the essence!</description></item><item><title>EQL to VQL - Leverage EQL based detection rules in Velociraptor</title><link>https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/</guid><description>If you have been following the development of Velociraptor for a while you are probably more than familiar with Velociraptor&amp;rsquo;s flexible query language (VQL). Because Velociraptor is an agent running on the endpoint, VQL facilitates access to all manners of data sources, from event logs, event tracing for Windows (ETW) to live analysis and triaging - all orchestrated using VQL as the flexible glue language.
While VQL can be used for hunting or detection, many traditional threat hunting platforms work by forwarding logs to a central location and then running queries over the aggregate data from all endpoints.</description></item><item><title>ETW Part 2: Process Parent Spoofing</title><link>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</guid><description>Process Parent Spoofing A lot of the current state of the art detection techniques rely on process creation logs, and their implied parent/child relationships. For example, many detection rules alert when Powershell is launched from WinWord.exe as it typically indicates a macro has started a powershell payload.
Many people are sometimes surprised to learn that on Windows parent/child process relationship is not particularly reliable. Back in 2009, Didier Stevens released a demo tool called SelectMyParent demonstrating a quirk of the Windows CreateProcess API that allows any caller to simply spoof the parent process ID.</description></item><item><title>Event Tracing for Windows Part 1</title><link>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</guid><description>Digging into Windows Internals One of the most important aspects of modern operating systems is instrumentation of the running software on the system. Instrumentation provides the visibility to understand what the system is doing at any given moment. This is obviously important for system administrators and software developers, but visibility into machine state is increasingly being used for security monitoring and response.
In Windows, system instrumentation is provided by the Event Tracing For Windows (ETW), an extensive framework for instrumentation and visibility.</description></item></channel></rss>