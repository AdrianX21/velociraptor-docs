<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ETW on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/tags/etw/</link><description>Recent content in ETW on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/tags/etw/index.xml" rel="self" type="application/rss+xml"/><item><title>WMI Event Consumers: what are you missing?</title><link>https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing/</guid><description>WMI Eventing is a fairly well known technique in DFIR, however some tools may not provide the coverage you expect. This article covers WMI eventing visibility and detection including custom namespaces.
Selection bias in WWII: missing what is not collected. Background There has been a fair bit of research and observations of WMI eventing in field over the last years. In short, a WMI event consumer is a method of subscribing to certain system events, then enabling an action of some sort.</description></item><item><title>EQL to VQL - Leverage EQL based detection rules in Velociraptor</title><link>https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-11-09-eql2vql/</guid><description>If you have been following the development of Velociraptor for a while you are probably more than familiar with Velociraptor&amp;rsquo;s flexible query language (VQL). Because Velociraptor is an agent running on the endpoint, VQL facilitates access to all manners of data sources, from event logs, event tracing for Windows (ETW) to live analysis and triaging - all orchestrated using VQL as the flexible glue language.
While VQL can be used for hunting or detection, many traditional threat hunting platforms work by forwarding logs to a central location and then running queries over the aggregate data from all endpoints.</description></item><item><title>ETW Part 2: Process Parent Spoofing</title><link>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</guid><description>Process Parent Spoofing A lot of the current state of the art detection techniques rely on process creation logs, and their implied parent/child relationships. For example, many detection rules alert when Powershell is launched from WinWord.exe as it typically indicates a macro has started a powershell payload.
Many people are sometimes surprised to learn that on Windows parent/child process relationship is not particularly reliable. Back in 2009, Didier Stevens released a demo tool called SelectMyParent demonstrating a quirk of the Windows CreateProcess API that allows any caller to simply spoof the parent process ID.</description></item><item><title>Event Tracing for Windows Part 1</title><link>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</guid><description>Digging into Windows Internals One of the most important aspects of modern operating systems is instrumentation of the running software on the system. Instrumentation provides the visibility to understand what the system is doing at any given moment. This is obviously important for system administrators and software developers, but visibility into machine state is increasingly being used for security monitoring and response.
In Windows, system instrumentation is provided by the Event Tracing For Windows (ETW), an extensive framework for instrumentation and visibility.</description></item></channel></rss>