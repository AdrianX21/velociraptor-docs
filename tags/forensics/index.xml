<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/tags/forensics/</link><description>Recent content in Forensics on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/tags/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>Paths and filesystem accessors</title><link>https://docs.velociraptor.app/blog/2022/2022-03-21-paths/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2022/2022-03-21-paths/</guid><description>This article discusses a feature available since 0.6.4 release.
Path handling is fundamental to forensic analysis, as a large amount of relevant information is still kept on disk within a filesystem. Superficially, We are all familiar with how paths work - a path is typically a string that we can provide to some OS API (for example the Windows CreateFile() or Linux open() API) which facilitates interacting with a file or a directory on the filesystem.</description></item><item><title>Carving $USN journal entries</title><link>https://docs.velociraptor.app/blog/2021/2021-06-16-carving-usn-journal-entries-72d5c66971da/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-06-16-carving-usn-journal-entries-72d5c66971da/</guid><description>Digging even deeper! One of the most important tasks in DFIR is reconstructing past filesystem activity. This is useful for example, in determining when files were introduced into the system (e.g. in a phishing campaign or drive by downloads) or when binaries were executed by way of modifications of prefetch files.
I have previously written about the Windows Update Sequence Number journal (USN). The USN journal is a file internal to the NTFS filesystem that maintains a log of interactions with the filesystem.</description></item><item><title>Digging into process memory</title><link>https://docs.velociraptor.app/blog/2021/2021-04-16-digging-into-process-memory-33c60a640cdb/</link><pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-04-16-digging-into-process-memory-33c60a640cdb/</guid><description>Unlike traditional dead disk forensic tools, Velociraptor’s main advantage is that it is capable of directly looking at volatile system state, such as running processes, open files and currently connected sockets. This class of forensic artifacts are called Volatile Artifacts since they change rapidly as the system operates — processes can start and stop quickly, files can be closed etc.
Traditionally, acquiring volatile artifacts meant taking a raw physical memory image, and then analyzing this with a memory analysis framework such as Volatility or Rekall.</description></item><item><title>Digging for files with Velociraptor</title><link>https://docs.velociraptor.app/blog/2021/2021-02-13-digging-for-files-with-velociraptor-a1c0a21e242b/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-02-13-digging-for-files-with-velociraptor-a1c0a21e242b/</guid><description>One of the most common questions in digital forensics is:
Is a file with a specific filename currently present on this system or was it in the past? There are many scenarios that lead to this question, from theft of IP by rogue employees, to drive by downloads from malicious websites or even victims of phishing emails. Often we need to scope this question to the entire network (Which machines had this file?</description></item><item><title>The Windows USN Journal</title><link>https://docs.velociraptor.app/blog/2020/2020-11-13-the-windows-usn-journal-f0c55c9010e/</link><pubDate>Thu, 12 Nov 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-11-13-the-windows-usn-journal-f0c55c9010e/</guid><description>Thanks to Matt Green for discussions, ideas and code….
NTFS is the default filesystem on Windows systems, so it is important for DFIR tools to support extracting as much system state information as possible from it. Velociraptor already has a full featured NTFS parser, and in a recent release (0.5.2) also added a parser for the USN Journal (Update Sequence Number Journal), or Change Journal.
What is the USN Journal?</description></item><item><title>Triage with Velociraptor — Pt 4</title><link>https://docs.velociraptor.app/blog/2020/2020-07-14-triage-with-velociraptor-pt-4-cf0e60810d1e/</link><pubDate>Tue, 14 Jul 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-07-14-triage-with-velociraptor-pt-4-cf0e60810d1e/</guid><description>&amp;lt;a href=&amp;#34;https://www.freepik.com/free-photos-vectors/woman&amp;#34;&amp;gt;Woman vector created by vectorpouch &amp;lt;/a&amp;gt;— &amp;lt;a href=&amp;#34;http://www.freepik.com&amp;#34;&amp;gt;www.freepik.com&amp;lt;/a&amp;gt; Woman vector created by vectorpouch — www.freepik.com
Velociraptor is a great tool for collecting Artifacts such as files and other state information from endpoints. Artifacts are simply VQL queries wrapped inside a YAML file providing the query with sufficient context to operate. Typically the triage phase of the DFIR process involves collecting and preserving evidence as quickly as possible, performing quick analysis in order to identify machines of interest for further analysis.</description></item></channel></rss>