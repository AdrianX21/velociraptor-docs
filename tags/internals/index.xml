<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Internals on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/tags/internals/</link><description>Recent content in Internals on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Sep 2020 01:38:44 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/tags/internals/index.xml" rel="self" type="application/rss+xml"/><item><title>Velociraptor Communications</title><link>https://docs.velociraptor.app/blog/2020/2020-09-28-velociraptor-network-communications-30568624043a/</link><pubDate>Sun, 27 Sep 2020 01:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-09-28-velociraptor-network-communications-30568624043a/</guid><description>You might have heard that Velociraptor allows you to quickly query endpoint state for rapid response and monitoring of many thousands of devices across the internet. Unlike some other tools, Velociraptor’s communication is scalable, secure and instantaneous.
Many people ask me about the client/server communication protocol. The Velociraptor documentation simply states that communications is encrypted over a TLS connection but there is more to it than that.
In this post I would like to delve into the low level details of how clients securely communicate with the server and cover some common deployment scenarios.</description></item><item><title>Profiling the beast</title><link>https://docs.velociraptor.app/blog/2020/2020-08-16-profiling-the-beast-58913437fd16/</link><pubDate>Sun, 16 Aug 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-08-16-profiling-the-beast-58913437fd16/</guid><description>Photo by &amp;lt;a href=&amp;#34;https://unsplash.com/@danielkcheung?utm_source=medium&amp;amp;amp;utm_medium=referral&amp;#34;&amp;gt;Daniel Cheung&amp;lt;/a&amp;gt; on &amp;lt;a href=&amp;#34;https://unsplash.com?utm_source=medium&amp;amp;amp;utm_medium=referral&amp;#34;&amp;gt;Unsplash&amp;lt;/a&amp;gt; Photo by Daniel Cheung on Unsplash
You might have previously heard about Velociraptor — fast becoming the standard open source agent for endpoint monitoring and collection. Being an open source project provides users with visibility into the inner workings of the tool since anyone can see the source code and even contribute to it!
While I usually write about Velociraptor features that make DFIR work easier and more effective, this time I am actually going to talk about a feature of the Golang programming language itself (which Velociraptor is written in).</description></item><item><title>Velociraptor in the tool age</title><link>https://docs.velociraptor.app/blog/2020/2020-07-13-velociraptor-in-the-tool-age-d896dfe71b9/</link><pubDate>Mon, 13 Jul 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-07-13-velociraptor-in-the-tool-age-d896dfe71b9/</guid><description>&amp;lt;a href=&amp;#34;https://www.freepik.com/free-photos-vectors/people&amp;#34;&amp;gt;People vector created by &amp;lt;code&amp;gt;brgfx&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt;— &amp;lt;a href=&amp;#34;http://www.freepik.com&amp;#34;&amp;gt;www.freepik.com&amp;lt;/a&amp;gt; People vector created by brgfx — www.freepik.com
Velociraptor is a powerful endpoint visibility tool. It has plugins and parsers for many file formats, such as raw NTFS access, raw registry hive, prefetch files etc.
However, as most DFIR professionals know, there are so many tools out there that we would love to use in our IR work. One of the strengths of Velociraptor is its flexibility afforded by the use of theVelociraptor Query Language (VQL).</description></item></channel></rss>