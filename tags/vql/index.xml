<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VQL on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/tags/vql/</link><description>Recent content in VQL on Velociraptor - Digging deeper!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 03 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/tags/vql/index.xml" rel="self" type="application/rss+xml"/><item><title>Velociraptor vs Printnightmare</title><link>https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/</link><pubDate>Sun, 11 Jul 2021 18:13:50 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-07-12-velociraptor-vs-printnightmare/</guid><description>Hunting a Zero day! Matthew Green and Mike Cohen Velociraptor is an advanced open source endpoint visibility framework based on a flexible query language called VQL. What makes Velociraptor unique from other endpoint tools is the flexibility to develop new queries to address emerging threats.
This post walks through a common use case for Velociraptor’s VQL: detecting exploitation of a new zero day (A newly announced vulnerability without a patch available).</description></item><item><title>ETW Part 2: Process Parent Spoofing</title><link>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-09-03-process-spoofing/</guid><description>Process Parent Spoofing A lot of the current state of the art detection techniques rely on process creation logs, and their implied parent/child relationships. For example, many detection rules alert when Powershell is launched from WinWord.exe as it typically indicates a macro has started a powershell payload.
Many people are sometimes surprised to learn that on Windows parent/child process relationship is not particularly reliable. Back in 2009, Didier Stevens released a demo tool called SelectMyParent demonstrating a quirk of the Windows CreateProcess API that allows any caller to simply spoof the parent process ID.</description></item><item><title>Event Tracing for Windows Part 1</title><link>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-08-18-velociraptor-and-etw/</guid><description>Digging into Windows Internals One of the most important aspects of modern operating systems is instrumentation of the running software on the system. Instrumentation provides the visibility to understand what the system is doing at any given moment. This is obviously important for system administrators and software developers, but visibility into machine state is increasingly being used for security monitoring and response.
In Windows, system instrumentation is provided by the Event Tracing For Windows (ETW), an extensive framework for instrumentation and visibility.</description></item><item><title>Detecting DLL Hijacking With VQL</title><link>https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-02-02-detecting-dll-hijacking-with-vql-e9a735354257/</guid><description>One of my favorite pastime is reading Twitter and following other security researchers. I love being able to see a new tool or technique and develop an understanding and detections for it. A while back, I was reading my feed and saw an excellent article titled I Like to Move It: Windows Lateral Movement Part 3: DLL Hijacking.
The article describes an interesting form of lateral movement — DLL Hijacking. DLL Hijacking is an abuse of the Windows DLL search order resolution process.</description></item><item><title>Concurrent VQL</title><link>https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-01-22-concurrent-vql-6d381fdb0b1f/</guid><description>Velociraptor’s special source is really the Velociraptor Query Language (VQL). Using VQL allows administrators to query their endpoints and respond to new threats quickly and flexibly.
VQL was always intended to be a simple query language which users could pick up in a matter of hours, while being powerful at the same time. We never intended VQL to be a full blown programming language. Nevertheless, performance is a critical feature of VQL, simply because queries typically need to process large amount of data quickly.</description></item><item><title>Parsing binary files</title><link>https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/</link><pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2021/2021-01-19-parsing-binary-files-d31114a41f14/</guid><description>During the course of our DFIR work, we typically need to extract some information from endpoints from various files and registry keys on the system. Sometimes it is possible to extract the needed information using text processing tools — such as a regular expression applied on a configuration file.
In many cases however, the information we need is encoded inside a binary file. A large part of DFIR analysis involves parsing binary structures from files, registry keys and even event logs.</description></item><item><title>Slack and Velociraptor</title><link>https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/</link><pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-12-26-slack-and-velociraptor-b63803ba4b16/</guid><description>Photo by &amp;lt;a href=&amp;#34;https://unsplash.com/@gamell?utm_source=medium&amp;amp;amp;utm_medium=referral&amp;#34;&amp;gt;Joan Gamell&amp;lt;/a&amp;gt; on &amp;lt;a href=&amp;#34;https://unsplash.com?utm_source=medium&amp;amp;amp;utm_medium=referral&amp;#34;&amp;gt;Unsplash&amp;lt;/a&amp;gt; Photo by Joan Gamell on Unsplash
You might have heard of Slack — a chatting app that has grown in popularity over the past few years. Slack allows for API access to the the workspaces, which opens the door to novel applications and automation.
In this blog post I will demonstrate how to connect Slack to Velociraptor, and be notified within a Slack channel of various events that happen on your Velociraptor deployment.</description></item><item><title>The Velociraptor Query Language Pt 2</title><link>https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/</link><pubDate>Fri, 19 Jun 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-06-19-the-velociraptor-query-language-pt-2-fe92bb7aa150/</guid><description>In our previous article I introduced the basics of the Velociraptor Query Language (VQL). We have learned the basic structure of VQL is similar to the SQL SELECT statement
However, one of the main differences between SQL and VQL is that VQL’s data sources are not simple data tables, but are instead executable code termed “plugins”. VQL plugins are simply generators of rows, and may take a number of named arguments.</description></item><item><title>The Velociraptor Query Language Pt 1</title><link>https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/</link><pubDate>Sun, 14 Jun 2020 00:38:44 +0000</pubDate><guid>https://docs.velociraptor.app/blog/2020/2020-06-14-the-velociraptor-query-language-pt-1-d721bff100bf/</guid><description>Velociraptor’s query language is central to the operation of Velociraptor. We find it being used in querying endpoints, collecting forensic artifacts and endpoint state and even in post processing data on the server.
Velociraptor is ultimately just a VQL query evaluation engine!
Why should you know more about VQL? Users do not actually need to know VQL to simply collect DFIR artifacts from endpoints, hunt for malware or remediate an infection.</description></item></channel></rss>